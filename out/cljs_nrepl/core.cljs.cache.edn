;; Analyzed by ClojureScript 1.7.170
{:use-macros {defroutes dogfort.middleware.routes-macros, POST dogfort.middleware.routes-macros, let-realised redlobster.macros, promise redlobster.macros, ANY dogfort.middleware.routes-macros, GET dogfort.middleware.routes-macros}, :excludes #{uuid}, :name cljs-nrepl.core, :imports nil, :requires {redlobster.promise redlobster.promise, cljs cljs.js, dogfort.middleware.defaults dogfort.middleware.defaults, cljs.js cljs.js, redlobster redlobster.promise, dogfort.middleware.routes dogfort.middleware.routes, cljs.nodejs cljs.nodejs, dogfort.http dogfort.http, defaults dogfort.middleware.defaults, cljs.reader cljs.reader, reader cljs.reader}, :uses {run-http dogfort.http}, :defs {uuid {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 91, :column 7, :end-line 91, :end-column 11, :arglists (quote ([]))}, :name cljs-nrepl.core/uuid, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, redirect {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([url]))}, :name cljs-nrepl.core/redirect, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 15, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url]))}, main {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 145, :column 7, :end-line 145, :end-column 11, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs-nrepl.core/main, :variadic true, :file "src/cljs_nrepl/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, handler {:name cljs-nrepl.core/handler, :file "src/cljs_nrepl/core.cljs", :line 129, :column 1, :end-line 129, :end-column 19, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 129, :column 12, :end-line 129, :end-column 19}}, my-eval {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 57, :column 7, :end-line 57, :end-column 14, :arglists (quote ([{:keys [source]}]))}, :name cljs-nrepl.core/my-eval, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 14, :method-params ([p__10528]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [source]}]))}, eval {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([s]))}, :name cljs-nrepl.core/eval, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, response {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 42, :column 7, :end-line 42, :end-column 15, :arglists (quote ([session id m]))}, :name cljs-nrepl.core/response, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 15, :method-params ([session id m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists (quote ([session id m]))}, op-handle {:name cljs-nrepl.core/op-handle, :file "src/cljs_nrepl/core.cljs", :line 101, :column 1, :end-line 101, :end-column 20, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 101, :column 11, :end-line 101, :end-column 20}}, rand-subseq {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 90, :column 7, :end-line 90, :end-column 18, :arglists (quote ([n]))}, :name cljs-nrepl.core/rand-subseq, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 18, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, clj->json2 {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 32, :column 3, :end-line 32, :end-column 13, :arglists (quote ([ds])), :doc "the drawbridge client quirkily won't accept standard json"}, :name cljs-nrepl.core/clj->json2, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 13, :method-params ([ds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ds])), :doc "the drawbridge client quirkily won't accept standard json"}, clj->json {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([ds]))}, :name cljs-nrepl.core/clj->json, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 16, :method-params ([ds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ds]))}, eval-str {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([s]))}, :name cljs-nrepl.core/eval-str, :variadic false, :file "src/cljs_nrepl/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, st {:name cljs-nrepl.core/st, :file "src/cljs_nrepl/core.cljs", :line 16, :column 1, :end-line 16, :end-column 8, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/src/cljs_nrepl/core.cljs", :line 16, :column 6, :end-line 16, :end-column 8}}}, :require-macros {dogfort.middleware.routes-macros dogfort.middleware.routes-macros, redlobster.macros redlobster.macros, cljs cljs.js, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{:get :wrap-file :done session :default :ns :value cljs.core identity :params :op :source :port :headers m :new-session :status :id :code id :hierarchy :body :location and :session :eval}, :order [:status :headers :body :location and session id m :session :id :done :source :eval :ns cljs.core identity :hierarchy :op :default :new-session :code :value :params :get :wrap-file :port]}, :doc nil}