;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dogfort.util.request, :imports nil, :requires {dogfort.util.parsing dogfort.util.parsing}, :uses {re-value dogfort.util.parsing}, :defs {request-url {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 5, :column 7, :end-line 5, :end-column 18, :arglists (quote ([request])), :doc "Return the full URL of the request.", :added "1.2"}, :added "1.2", :name dogfort.util.request/request-url, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 18, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the full URL of the request."}, content-type {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 16, :column 7, :end-line 16, :end-column 19, :arglists (quote ([request])), :doc "Return the content-type of the request, or nil if no content-type is set.", :added "1.3"}, :added "1.3", :name dogfort.util.request/content-type, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the content-type of the request, or nil if no content-type is set."}, content-length {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 23, :column 7, :end-line 23, :end-column 21, :arglists (quote ([request])), :doc "Return the content-length of the request, or nil no content-length is set.", :added "1.3"}, :added "1.3", :name dogfort.util.request/content-length, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 21, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the content-length of the request, or nil no content-length is set."}, character-encoding {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([request])), :doc "Return the character encoding for the request, or nil if it is not set.", :added "1.3"}, :added "1.3", :name dogfort.util.request/character-encoding, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 25, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Return the character encoding for the request, or nil if it is not set."}, urlencoded-form? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 41, :column 7, :end-line 41, :end-column 23, :arglists (quote ([request])), :doc "True if a request contains a urlencoded form in the body.", :added "1.3"}, :added "1.3", :name dogfort.util.request/urlencoded-form?, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 23, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "True if a request contains a urlencoded form in the body."}, body-string {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 48, :column 11, :end-line 48, :end-column 22, :arglists (quote ([request])), :added "1.2", :doc "Return the request body as a string."}, :added "1.2", :name dogfort.util.request/body-string, :file "out/dogfort/util/request.cljs", :end-column 22, :column 1, :line 48, :end-line 48, :arglists (quote ([request])), :doc "Return the request body as a string."}, path-info {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 67, :column 7, :end-line 67, :end-column 16, :arglists (quote ([request])), :doc "Returns the relative path of the request.", :added "1.2"}, :added "1.2", :name dogfort.util.request/path-info, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 16, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns the relative path of the request."}, in-context? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 74, :column 7, :end-line 74, :end-column 18, :arglists (quote ([request context])), :doc "Returns true if the URI of the request is a subpath of the supplied context.", :added "1.2"}, :added "1.2", :name dogfort.util.request/in-context?, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 18, :method-params ([request context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request context])), :doc "Returns true if the URI of the request is a subpath of the supplied context."}, set-context {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/request.cljs", :line 80, :column 7, :end-line 80, :end-column 18, :arglists (quote ([request context])), :doc "Associate a context and path-info with the  request. The request URI must be\n  a subpath of the supplied context.", :added "1.2"}, :added "1.2", :name dogfort.util.request/set-context, :variadic false, :file "out/dogfort/util/request.cljs", :end-column 18, :method-params ([request context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request context])), :doc "Associate a context and path-info with the  request. The request URI must be\n  a subpath of the supplied context."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:default request :headers :path-info :context :uri :query-string :hierarchy :body :scheme context in-context?}, :order [:scheme :headers :uri :query-string :hierarchy :body :default :path-info in-context? request context :context]}, :doc "Functions for augmenting and pulling information from request maps."}