;; Analyzed by ClojureScript 1.7.170
{:name dogfort.util.codec, :doc "Encoding and decoding utilities.", :excludes #{}, :use-macros nil, :require-macros nil, :uses {assoc-conj dogfort.util.data}, :requires {dogfort.util.data dogfort.util.data, str clojure.string, clojure.string clojure.string, cljs.nodejs cljs.nodejs}, :imports nil, :defs {percent-encode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([unencoded & [encoding]])), :doc "Percent-encode every character in the given string using either the specified\n  encoding, or UTF-8 by default.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(unencoded [encoding])], :arglists ([unencoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/percent-encode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(unencoded [encoding])], :arglists ([unencoded & [encoding]]), :arglists-meta (nil)}, :method-params [(unencoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([unencoded & [encoding]]), :doc "Percent-encode every character in the given string using either the specified\n  encoding, or UTF-8 by default."}, url-decode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 54, :column 15, :end-line 54, :end-column 25, :tag String, :arglists (quote ([encoded & [encoding]])), :doc "Returns the url-decoded version of the given string, using either a specified\n  encoding or UTF-8 by default. If the encoding is invalid, nil is returned.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/url-decode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}, :method-params [(encoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 54, :ret-tag String, :end-line 54, :max-fixed-arity 1, :tag String, :fn-var true, :arglists ([encoded & [encoding]]), :doc "Returns the url-decoded version of the given string, using either a specified\n  encoding or UTF-8 by default. If the encoding is invalid, nil is returned."}, number->hex {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 15, :column 8, :end-line 15, :end-column 19, :private true, :arglists (quote ([num]))}, :private true, :name dogfort.util.codec/number->hex, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 19, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num]))}, double-escape {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 12, :column 8, :end-line 12, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name dogfort.util.codec/double-escape, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, form-encode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 105, :column 7, :end-line 105, :end-column 18, :arglists (quote ([x & [encoding]])), :doc "Encode the supplied value into www-form-urlencoded format, often used in\n  URL query strings and POST request bodies, using the specified encoding.\n  If the encoding is not specified, it defaults to UTF-8", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x [encoding])], :arglists ([x & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/form-encode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x [encoding])], :arglists ([x & [encoding]]), :arglists-meta (nil)}, :method-params [(x [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists ([x & [encoding]]), :doc "Encode the supplied value into www-form-urlencoded format, often used in\n  URL query strings and POST request bodies, using the specified encoding.\n  If the encoding is not specified, it defaults to UTF-8"}, form-decode-str {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 115, :column 7, :end-line 115, :end-column 22, :arglists (quote ([encoded & [encoding]])), :doc "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/form-decode-str, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}, :method-params [(encoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists ([encoded & [encoding]]), :doc "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default."}, form-decode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 121, :column 7, :end-line 121, :end-column 18, :arglists (quote ([encoded & [encoding]])), :doc "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default. If the encoded value is a string, a string is returned.\n  If the encoded value is a map of parameters, a map is returned.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/form-decode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}, :method-params [(encoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists ([encoded & [encoding]]), :doc "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default. If the encoded value is a string, a string is returned.\n  If the encoded value is a map of parameters, a map is returned."}, url-encode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([unencoded & [encoding]])), :doc "Returns the url-encoded version of the given string, using either a specified\n  encoding or UTF-8 by default.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(unencoded [encoding])], :arglists ([unencoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/url-encode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(unencoded [encoding])], :arglists ([unencoded & [encoding]]), :arglists-meta (nil)}, :method-params [(unencoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([unencoded & [encoding]]), :doc "Returns the url-encoded version of the given string, using either a specified\n  encoding or UTF-8 by default."}, form-encode* {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 92, :column 7, :end-line 92, :end-column 19, :arglists (quote ([params encoding]))}, :name dogfort.util.codec/form-encode*, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 19, :method-params ([params encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params encoding]))}, parse-bytes {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 26, :column 8, :end-line 26, :end-column 19, :private true, :arglists (quote ([encoded-bytes]))}, :private true, :name dogfort.util.codec/parse-bytes, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 19, :method-params ([encoded-bytes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([encoded-bytes]))}, base64-decode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 65, :column 7, :end-line 65, :end-column 20, :arglists (quote ([encoded])), :doc "Decode a base64 encoded string into a Buffer."}, :name dogfort.util.codec/base64-decode, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 20, :method-params ([encoded]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([encoded])), :doc "Decode a base64 encoded string into a Buffer."}, percent-decode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 33, :column 7, :end-line 33, :end-column 21, :arglists (quote ([encoded & [encoding]])), :doc "Decode every percent-encoded character in the given string using the\n  specified encoding, or UTF-8 by default.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}}, :name dogfort.util.codec/percent-decode, :variadic true, :file "out/dogfort/util/codec.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(encoded [encoding])], :arglists ([encoded & [encoding]]), :arglists-meta (nil)}, :method-params [(encoded [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists ([encoded & [encoding]]), :doc "Decode every percent-encoded character in the given string using the\n  specified encoding, or UTF-8 by default."}, base64-encode {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/codec.cljs", :line 60, :column 7, :end-line 60, :end-column 20, :arglists (quote ([unencoded])), :doc "Encode a Buffer into a base64 encoded string."}, :name dogfort.util.codec/base64-encode, :variadic false, :file "out/dogfort/util/codec.cljs", :end-column 20, :method-params ([unencoded]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([unencoded])), :doc "Encode a Buffer into a base64 encoded string."}}}