;; Analyzed by ClojureScript 1.7.170
{:name dogfort.util.mime-type, :doc "Utility functions for finding out the mime-type of a file.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {default-mime-types {:name dogfort.util.mime-type/default-mime-types, :file "out/dogfort/util/mime_type.cljs", :line 6, :column 1, :end-line 6, :end-column 24, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/mime_type.cljs", :line 6, :column 6, :end-line 6, :end-column 24}}, filename-ext {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/mime_type.cljs", :line 89, :column 8, :end-line 89, :end-column 20, :private true, :arglists (quote ([filename])), :doc "Returns the file extension of a filename or filepath."}, :private true, :name dogfort.util.mime-type/filename-ext, :variadic false, :file "out/dogfort/util/mime_type.cljs", :end-column 20, :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Returns the file extension of a filename or filepath."}, ext-mime-type {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/util/mime_type.cljs", :line 94, :column 7, :end-line 94, :end-column 20, :arglists (quote ([filename & [mime-types]])), :doc "Get the mimetype from the filename extension. Takes an optional map of\n  extensions to mimetypes that overrides values in the default-mime-types map.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(filename [mime-types])], :arglists ([filename & [mime-types]]), :arglists-meta (nil)}}, :name dogfort.util.mime-type/ext-mime-type, :variadic true, :file "out/dogfort/util/mime_type.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(filename [mime-types])], :arglists ([filename & [mime-types]]), :arglists-meta (nil)}, :method-params [(filename [mime-types])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists ([filename & [mime-types]]), :doc "Get the mimetype from the filename extension. Takes an optional map of\n  extensions to mimetypes that overrides values in the default-mime-types map."}}}