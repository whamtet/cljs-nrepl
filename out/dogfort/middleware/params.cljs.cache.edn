;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros, promise redlobster.macros}, :excludes #{}, :name dogfort.middleware.params, :imports nil, :requires {codec dogfort.util.codec, dogfort.util.codec dogfort.util.codec, req dogfort.util.request, dogfort.util.request dogfort.util.request, p redlobster.promise, redlobster.promise redlobster.promise}, :uses nil, :defs {parse-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 9, :column 8, :end-line 9, :end-column 20, :private true, :arglists (quote ([params encoding]))}, :private true, :name dogfort.middleware.params/parse-params, :variadic false, :file "out/dogfort/middleware/params.cljs", :end-column 20, :method-params ([params encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params encoding]))}, assoc-query-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 13, :column 7, :end-line 13, :end-column 25, :arglists (quote ([request encoding])), :doc "Parse and assoc parameters from the query string with the request.", :added "1.3"}, :added "1.3", :name dogfort.middleware.params/assoc-query-params, :variadic false, :file "out/dogfort/middleware/params.cljs", :end-column 25, :method-params ([request encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request encoding])), :doc "Parse and assoc parameters from the query string with the request."}, slurp {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([body]))}, :name dogfort.middleware.params/slurp, :variadic false, :file "out/dogfort/middleware/params.cljs", :end-column 12, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, assoc-form-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 29, :column 7, :end-line 29, :end-column 24, :arglists (quote ([handler request encoding])), :doc "Parse and assoc parameters from the request body with the request.", :added "1.2"}, :added "1.2", :name dogfort.middleware.params/assoc-form-params, :variadic false, :file "out/dogfort/middleware/params.cljs", :end-column 24, :method-params ([handler request encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([handler request encoding])), :doc "Parse and assoc parameters from the request body with the request."}, params-request {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([request] [request options])), :doc "Adds parameters from the query string and the request body to the request\n  map. See: wrap-params.", :added "1.2", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(handler request [opts])], :arglists ([handler request & [opts]]), :arglists-meta (nil)}}, :added "1.2", :name dogfort.middleware.params/params-request, :variadic true, :file "out/dogfort/middleware/params.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(handler request [opts])], :arglists ([handler request & [opts]]), :arglists-meta (nil)}, :method-params [(handler request [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([handler request & [opts]]), :doc "Adds parameters from the query string and the request body to the request\n  map. See: wrap-params."}, wrap-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/params.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([handler] [handler options])), :doc "Middleware to parse urlencoded parameters from the query string and form\n  body (if the request is a url-encoded form). Adds the following keys to\n  the request map:\n\n  :query-params - a map of parameters from the query string\n  :form-params  - a map of parameters from the body\n  :params       - a merged map of all types of parameter\n\n  Accepts the following options:\n\n  :encoding - encoding to use for url-decoding. If not specified, uses\n  the request character encoding, or \"UTF-8\" if no request\n  character encoding is set.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [options])], :arglists ([handler & [options]]), :arglists-meta (nil)}}, :name dogfort.middleware.params/wrap-params, :variadic true, :file "out/dogfort/middleware/params.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [options])], :arglists ([handler & [options]]), :arglists-meta (nil)}, :method-params [(handler [options])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists ([handler & [options]]), :doc "Middleware to parse urlencoded parameters from the query string and form\n  body (if the request is a url-encoded form). Adds the following keys to\n  the request map:\n\n  :query-params - a map of parameters from the query string\n  :form-params  - a map of parameters from the body\n  :params       - a merged map of all types of parameter\n\n  Accepts the following options:\n\n  :encoding - encoding to use for url-decoding. If not specified, uses\n  the request character encoding, or \"UTF-8\" if no request\n  character encoding is set."}}, :require-macros {redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:encoding :params :form-params :query-params :query-string :body}, :order [:query-string :query-params :params :body :form-params :encoding]}, :doc "Middleware to parse url-encoded parameters from the query string and request\n  body."}