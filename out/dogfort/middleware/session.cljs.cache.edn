;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros, waitp redlobster.macros, promise redlobster.macros}, :excludes #{}, :name dogfort.middleware.session, :imports nil, :requires {cookies dogfort.middleware.cookies, dogfort.middleware.cookies dogfort.middleware.cookies, store dogfort.middleware.session.store, dogfort.middleware.session.store dogfort.middleware.session.store, mem dogfort.middleware.session.memory, dogfort.middleware.session.memory dogfort.middleware.session.memory, p redlobster.promise, redlobster.promise redlobster.promise}, :uses nil, :defs {session-options {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 18, :column 8, :end-line 18, :end-column 23, :private true, :arglists (quote ([options]))}, :private true, :name dogfort.middleware.session/session-options, :variadic false, :file "out/dogfort/middleware/session.cljs", :end-column 23, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options]))}, bare-session-request {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 28, :column 8, :end-line 28, :end-column 28, :private true, :arglists (quote ([request & [{:keys [store cookie-name]}]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [{:keys [store cookie-name]}])], :arglists ([request & [{:keys [store cookie-name]}]]), :arglists-meta (nil)}}, :private true, :name dogfort.middleware.session/bare-session-request, :variadic true, :file "out/dogfort/middleware/session.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [{:keys [store cookie-name]}])], :arglists ([request & [{:keys [store cookie-name]}]]), :arglists-meta (nil)}, :method-params [(request [{:keys [store cookie-name]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([request & [{:keys [store cookie-name]}]])}, session-request {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 36, :column 7, :end-line 36, :end-column 22, :arglists (quote ([request] [request options])), :doc "Reads current HTTP session map and adds it to :session key of the request.\n  See: wrap-session.", :added "1.2", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [options])], :arglists ([request & [options]]), :arglists-meta (nil)}}, :added "1.2", :name dogfort.middleware.session/session-request, :variadic true, :file "out/dogfort/middleware/session.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [options])], :arglists ([request & [options]]), :arglists-meta (nil)}, :method-params [(request [options])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([request & [options]]), :doc "Reads current HTTP session map and adds it to :session key of the request.\n  See: wrap-session."}, bare-session-response {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 46, :column 8, :end-line 46, :end-column 29, :private true, :arglists (quote ([response {session-key :session/key} & [{:keys [store cookie-name cookie-attrs]}]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(response {session-key :session/key} [{:keys [store cookie-name cookie-attrs]}])], :arglists ([response {session-key :session/key} & [{:keys [store cookie-name cookie-attrs]}]]), :arglists-meta (nil)}}, :private true, :name dogfort.middleware.session/bare-session-response, :variadic true, :file "out/dogfort/middleware/session.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(response {session-key :session/key} [{:keys [store cookie-name cookie-attrs]}])], :arglists ([response {session-key :session/key} & [{:keys [store cookie-name cookie-attrs]}]]), :arglists-meta (nil)}, :method-params [(response {session-key :session/key} [{:keys [store cookie-name cookie-attrs]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([response {session-key :session/key} & [{:keys [store cookie-name cookie-attrs]}]])}, session-response {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 68, :column 7, :end-line 68, :end-column 23, :arglists (quote ([response request] [response request options])), :doc "Updates session based on :session key in response. See: wrap-session.", :added "1.2", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(response request [options])], :arglists ([response request & [options]]), :arglists-meta (nil)}}, :added "1.2", :name dogfort.middleware.session/session-response, :variadic true, :file "out/dogfort/middleware/session.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(response request [options])], :arglists ([response request & [options]]), :arglists-meta (nil)}, :method-params [(response request [options])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists ([response request & [options]]), :doc "Updates session based on :session key in response. See: wrap-session."}, wrap-session {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session.cljs", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([handler] [handler options])), :doc "Reads in the current HTTP session map, and adds it to the :session key on\n  the request. If a :session key is added to the response by the handler, the\n  session is updated with the new value. If the value is nil, the session is\n  deleted.\n\n  Accepts the following options:\n\n  :store        - An implementation of the SessionStore protocol in the\n                  dogfort.middleware.session.store namespace. This determines how\n                  the session is stored. Defaults to in-memory storage using\n                  dogfort.middleware.session.store/memory-store.\n\n  :root         - The root path of the session. Any path above this will not be\n                  able to see this session. Equivalent to setting the cookie's\n                  path attribute. Defaults to \"/\".\n\n  :cookie-name  - The name of the cookie that holds the session key. Defaults to\n                  \"ring-session\"\n\n  :cookie-attrs - A map of attributes to associate with the session cookie.\n                  Defaults to {:http-only true}.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}}, :name dogfort.middleware.session/wrap-session, :variadic false, :file "out/dogfort/middleware/session.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([handler] [handler options]), :arglists ([handler] [handler options]), :arglists-meta (nil nil)}, :method-params ([handler] [handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists ([handler] [handler options]), :doc "Reads in the current HTTP session map, and adds it to the :session key on\n  the request. If a :session key is added to the response by the handler, the\n  session is updated with the new value. If the value is nil, the session is\n  deleted.\n\n  Accepts the following options:\n\n  :store        - An implementation of the SessionStore protocol in the\n                  dogfort.middleware.session.store namespace. This determines how\n                  the session is stored. Defaults to in-memory storage using\n                  dogfort.middleware.session.store/memory-store.\n\n  :root         - The root path of the session. Any path above this will not be\n                  able to see this session. Equivalent to setting the cookie's\n                  path attribute. Defaults to \"/\".\n\n  :cookie-name  - The name of the cookie that holds the session key. Defaults to\n                  \"ring-session\"\n\n  :cookie-attrs - A map of attributes to associate with the session cookie.\n                  Defaults to {:http-only true}."}}, :require-macros {redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:path :store :cookies :cookie-name :value :recreate :session/key :root :session-cookie-attrs :http-only :cookie-attrs :session}, :order [:store :cookie-name :cookie-attrs :path :http-only :root :cookies :value :session :session/key :recreate :session-cookie-attrs]}, :doc "Middleware for maintaining browser sessions using cookies.\n\n  Sessions are stored using types that adhere to the\n  dogfort.middleware.session.store/SessionStore protocol.\n  Ring comes with two stores included:\n\n    dogfort.middleware.session.memory/memory-store\n    dogfort.middleware.session.cookie/cookie-store"}