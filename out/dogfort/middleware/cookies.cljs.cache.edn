;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros, waitp redlobster.macros, promise redlobster.macros}, :excludes #{}, :name dogfort.middleware.cookies, :imports nil, :requires {codec dogfort.util.codec, dogfort.util.codec dogfort.util.codec, str clojure.string, clojure.string clojure.string, p redlobster.promise, redlobster.promise redlobster.promise}, :uses nil, :defs {re-token {:name dogfort.middleware.cookies/re-token, :file "out/dogfort/middleware/cookies.cljs", :line 11, :column 1, :end-line 13, :end-column 11, :doc "HTTP token: 1*<any CHAR except CTLs or tspecials>. See RFC2068", :added "1.3", :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 13, :column 3, :end-line 13, :end-column 11, :doc "HTTP token: 1*<any CHAR except CTLs or tspecials>. See RFC2068", :added "1.3"}}, parse-cookies {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 53, :column 8, :end-line 53, :end-column 21, :private true, :arglists (quote ([request encoder])), :doc "Parse the cookies from a request map."}, :private true, :name dogfort.middleware.cookies/parse-cookies, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 21, :method-params ([request encoder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request encoder])), :doc "Parse the cookies from a request map."}, re-cookie-value {:name dogfort.middleware.cookies/re-cookie-value, :file "out/dogfort/middleware/cookies.cljs", :line 20, :column 1, :end-line 21, :end-column 18, :private true, :doc "RFC6265 cookie-value", :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 21, :column 3, :end-line 21, :end-column 18, :private true, :doc "RFC6265 cookie-value"}}, valid-attr? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 69, :column 8, :end-line 69, :end-column 19, :private true, :arglists (quote ([[key value]])), :doc "Is the attribute valid?"}, :private true, :name dogfort.middleware.cookies/valid-attr?, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 19, :method-params ([p__9715]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[key value]])), :doc "Is the attribute valid?"}, write-attr-map {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 79, :column 8, :end-line 79, :end-column 22, :private true, :arglists (quote ([attrs])), :doc "Write a map of cookie attributes to a string."}, :private true, :name dogfort.middleware.cookies/write-attr-map, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 22, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs])), :doc "Write a map of cookie attributes to a string."}, cookies-response {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 120, :column 7, :end-line 120, :end-column 23, :arglists (quote ([response] [response options])), :doc "For responses with :cookies, adds Set-Cookie header and returns response\n  without :cookies. See: wrap-cookies.", :added "1.2", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(response [{:keys [encoder], :or {encoder codec/form-encode}}])], :arglists ([response & [{:keys [encoder], :or {encoder codec/form-encode}}]]), :arglists-meta (nil)}}, :added "1.2", :name dogfort.middleware.cookies/cookies-response, :variadic true, :file "out/dogfort/middleware/cookies.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(response [{:keys [encoder], :or {encoder codec/form-encode}}])], :arglists ([response & [{:keys [encoder], :or {encoder codec/form-encode}}]]), :arglists-meta (nil)}, :method-params [(response [{:keys [encoder], :or {encoder codec/form-encode}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists ([response & [{:keys [encoder], :or {encoder codec/form-encode}}]]), :doc "For responses with :cookies, adds Set-Cookie header and returns response\n  without :cookies. See: wrap-cookies."}, write-value {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 64, :column 8, :end-line 64, :end-column 19, :private true, :arglists (quote ([key value encoder])), :doc "Write the main cookie value."}, :private true, :name dogfort.middleware.cookies/write-value, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 19, :method-params ([key value encoder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key value encoder])), :doc "Write the main cookie value."}, wrap-cookies {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 143, :column 7, :end-line 143, :end-column 19, :arglists (quote ([handler] [handler options])), :doc "Parses the cookies in the request map, then assocs the resulting map\n  to the :cookies key on the request.\n\n  Accepts the following options:\n\n  :decoder - a function to decode the cookie value. Expects a function that\n  takes a string and returns a string. Defaults to URL-decoding.\n\n  :encoder - a function to encode the cookie name and value. Expects a\n  function that takes a name/value map and returns a string.\n  Defaults to URL-encoding.\n\n  Each cookie is represented as a map, with its value being held in the\n  :value key. A cookie may optionally contain a :path, :domain or :port\n  attribute.\n\n  To set cookies, add a map to the :cookies key on the response. The values\n  of the cookie map can either be strings, or maps containing the following\n  keys:\n\n  :value     - the new value of the cookie\n  :path      - the subpath the cookie is valid for\n  :domain    - the domain the cookie is valid for\n  :max-age   - the maximum age in seconds of the cookie\n  :expires   - a date string at which the cookie will expire\n  :secure    - set to true if the cookie requires HTTPS, prevent HTTP access\n  :http-only - set to true if the cookie is valid for HTTP and HTTPS only\n  (ie. prevent JavaScript access)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}])], :arglists ([handler & [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}]]), :arglists-meta (nil)}}, :name dogfort.middleware.cookies/wrap-cookies, :variadic true, :file "out/dogfort/middleware/cookies.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(handler [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}])], :arglists ([handler & [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}]]), :arglists-meta (nil)}, :method-params [(handler [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists ([handler & [{:keys [decoder encoder], :or {decoder codec/form-decode-str, encoder codec/form-encode}}]]), :doc "Parses the cookies in the request map, then assocs the resulting map\n  to the :cookies key on the request.\n\n  Accepts the following options:\n\n  :decoder - a function to decode the cookie value. Expects a function that\n  takes a string and returns a string. Defaults to URL-decoding.\n\n  :encoder - a function to encode the cookie name and value. Expects a\n  function that takes a name/value map and returns a string.\n  Defaults to URL-encoding.\n\n  Each cookie is represented as a map, with its value being held in the\n  :value key. A cookie may optionally contain a :path, :domain or :port\n  attribute.\n\n  To set cookies, add a map to the :cookies key on the response. The values\n  of the cookie map can either be strings, or maps containing the following\n  keys:\n\n  :value     - the new value of the cookie\n  :path      - the subpath the cookie is valid for\n  :domain    - the domain the cookie is valid for\n  :max-age   - the maximum age in seconds of the cookie\n  :expires   - a date string at which the cookie will expire\n  :secure    - set to true if the cookie requires HTTPS, prevent HTTP access\n  :http-only - set to true if the cookie is valid for HTTP and HTTPS only\n  (ie. prevent JavaScript access)"}, re-cookie {:name dogfort.middleware.cookies/re-cookie, :file "out/dogfort/middleware/cookies.cljs", :line 24, :column 1, :end-line 25, :end-column 12, :private true, :doc "RFC6265 set-cookie-string", :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 25, :column 3, :end-line 25, :end-column 12, :private true, :doc "RFC6265 set-cookie-string"}}, cookies-request {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 111, :column 7, :end-line 111, :end-column 22, :arglists (quote ([request] [request options])), :doc "Parses cookies in the request map. See: wrap-cookies.", :added "1.2", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [{:keys [decoder], :or {decoder codec/form-decode-str}}])], :arglists ([request & [{:keys [decoder], :or {decoder codec/form-decode-str}}]]), :arglists-meta (nil)}}, :added "1.2", :name dogfort.middleware.cookies/cookies-request, :variadic true, :file "out/dogfort/middleware/cookies.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request [{:keys [decoder], :or {decoder codec/form-decode-str}}])], :arglists ([request & [{:keys [decoder], :or {decoder codec/form-decode-str}}]]), :arglists-meta (nil)}, :method-params [(request [{:keys [decoder], :or {decoder codec/form-decode-str}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists ([request & [{:keys [decoder], :or {decoder codec/form-decode-str}}]]), :doc "Parses cookies in the request map. See: wrap-cookies."}, set-cookies {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 101, :column 8, :end-line 101, :end-column 19, :private true, :arglists (quote ([response encoder])), :doc "Add a Set-Cookie header to a response if there is a :cookies key."}, :private true, :name dogfort.middleware.cookies/set-cookies, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 19, :method-params ([response encoder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response encoder])), :doc "Add a Set-Cookie header to a response if there is a :cookies key."}, write-cookies {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 92, :column 8, :end-line 92, :end-column 21, :private true, :arglists (quote ([cookies encoder])), :doc "Turn a map of cookies into a seq of strings for a Set-Cookie header."}, :private true, :name dogfort.middleware.cookies/write-cookies, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 21, :method-params ([cookies encoder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cookies encoder])), :doc "Turn a map of cookies into a seq of strings for a Set-Cookie header."}, set-cookie-attrs {:name dogfort.middleware.cookies/set-cookie-attrs, :file "out/dogfort/middleware/cookies.cljs", :line 28, :column 1, :end-line 30, :end-column 19, :private true, :doc "Attributes defined by RFC6265 that apply to the Set-Cookie header.", :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 30, :column 3, :end-line 30, :end-column 19, :private true, :doc "Attributes defined by RFC6265 that apply to the Set-Cookie header."}}, parse-cookie-header {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 37, :column 8, :end-line 37, :end-column 27, :private true, :arglists (quote ([header])), :doc "Turn a HTTP Cookie header into a list of name/value pairs."}, :private true, :name dogfort.middleware.cookies/parse-cookie-header, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 27, :method-params ([header]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([header])), :doc "Turn a HTTP Cookie header into a list of name/value pairs."}, re-cookie-octet {:name dogfort.middleware.cookies/re-cookie-octet, :file "out/dogfort/middleware/cookies.cljs", :line 16, :column 1, :end-line 17, :end-column 18, :private true, :doc "RFC6265 cookie-octet", :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 17, :column 3, :end-line 17, :end-column 18, :private true, :doc "RFC6265 cookie-octet"}}, decode-values {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 48, :column 8, :end-line 48, :end-column 21, :private true, :arglists (quote ([cookies decoder]))}, :private true, :name dogfort.middleware.cookies/decode-values, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 21, :method-params ([cookies decoder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cookies decoder]))}, strip-quotes {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/cookies.cljs", :line 43, :column 8, :end-line 43, :end-column 20, :private true, :arglists (quote ([value])), :doc "Strip quotes from a cookie value."}, :private true, :name dogfort.middleware.cookies/strip-quotes, :variadic false, :file "out/dogfort/middleware/cookies.cljs", :end-column 20, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Strip quotes from a cookie value."}}, :require-macros {redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:path every? valid-attr? :encoder :else :cookies :value :max-age :headers :expires :domain :decoder :secure :http-only attrs}, :order [:domain :max-age :path :secure :expires :http-only :value :headers every? valid-attr? attrs :else :cookies :decoder :encoder]}, :doc "Middleware for parsing and generating cookies."}