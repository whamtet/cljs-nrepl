;; Analyzed by ClojureScript 1.7.170
{:name dogfort.middleware.session.store, :doc "Contains the protocol used to define all Ring session storage engines.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {SessionStore {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/store.cljs", :line 4, :column 14, :end-line 4, :end-column 26, :doc "An interface to a session storage engine. Implementing this protocol allows\n  Ring session data to be stored in different places.\n\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n\n  Session stores should come with a mechanism for expiring old session data.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {read-session [[store key]], write-session [[store key data]], delete-session [[store key]]}}}, :protocol-symbol true, :name dogfort.middleware.session.store/SessionStore, :file "out/dogfort/middleware/session/store.cljs", :end-column 26, :column 1, :line 4, :protocol-info {:methods {read-session [[store key]], write-session [[store key data]], delete-session [[store key]]}}, :info nil, :end-line 4, :impls #{}, :doc "An interface to a session storage engine. Implementing this protocol allows\n  Ring session data to be stored in different places.\n\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n\n  Session stores should come with a mechanism for expiring old session data.", :jsdoc ("@interface")}, read-session {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/store.cljs", :line 12, :column 4, :end-line 12, :end-column 16, :protocol dogfort.middleware.session.store/SessionStore, :doc "Read a session map from the store. If the key is not found, nil\n    is returned.", :arglists (quote ([store key]))}, :protocol dogfort.middleware.session.store/SessionStore, :name dogfort.middleware.session.store/read-session, :variadic false, :file "out/dogfort/middleware/session/store.cljs", :end-column 16, :method-params ([store key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store key])), :doc "Read a session map from the store. If the key is not found, nil\n    is returned."}, write-session {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/store.cljs", :line 15, :column 4, :end-line 15, :end-column 17, :protocol dogfort.middleware.session.store/SessionStore, :doc "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.", :arglists (quote ([store key data]))}, :protocol dogfort.middleware.session.store/SessionStore, :name dogfort.middleware.session.store/write-session, :variadic false, :file "out/dogfort/middleware/session/store.cljs", :end-column 17, :method-params ([store key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([store key data])), :doc "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated."}, delete-session {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/store.cljs", :line 19, :column 4, :end-line 19, :end-column 18, :protocol dogfort.middleware.session.store/SessionStore, :doc "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.", :arglists (quote ([store key]))}, :protocol dogfort.middleware.session.store/SessionStore, :name dogfort.middleware.session.store/delete-session, :variadic false, :file "out/dogfort/middleware/session/store.cljs", :end-column 18, :method-params ([store key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store key])), :doc "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed."}}}