;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dogfort.middleware.session.memory, :imports nil, :requires {dogfort.middleware.session.store dogfort.middleware.session.store}, :uses {SessionStore dogfort.middleware.session.store}, :defs {MemoryStore {:num-fields 1, :protocols #{dogfort.middleware.session.store/SessionStore}, :name dogfort.middleware.session.memory/MemoryStore, :file "out/dogfort/middleware/session/memory.cljs", :end-column 21, :type true, :column 10, :line 5, :record false, :end-line 5, :skip-protocol-flag nil}, SessionStore {:impls (dogfort.middleware.session.memory/MemoryStore)}, ->MemoryStore {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/memory.cljs", :line 5, :column 10, :end-line 5, :end-column 21, :protocols #{dogfort.middleware.session.store/SessionStore}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([session-map]))}, :protocols #{dogfort.middleware.session.store/SessionStore}, :name dogfort.middleware.session.memory/->MemoryStore, :variadic false, :file "out/dogfort/middleware/session/memory.cljs", :end-column 21, :method-params ([session-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([session-map])), :skip-protocol-flag nil}, memory-store {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/session/memory.cljs", :line 17, :column 7, :end-line 17, :end-column 19, :arglists (quote ([] [session-atom])), :doc "Creates an in-memory session storage engine. Accepts an atom as an optional\n  argument; if supplied, the atom is used to hold the session data.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [session-atom]), :arglists ([] [session-atom]), :arglists-meta (nil nil)}}, :name dogfort.middleware.session.memory/memory-store, :variadic false, :file "out/dogfort/middleware/session/memory.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [session-atom]), :arglists ([] [session-atom]), :arglists-meta (nil nil)}, :method-params ([] [session-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists ([] [session-atom]), :doc "Creates an in-memory session storage engine. Accepts an atom as an optional\n  argument; if supplied, the atom is used to hold the session data."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{session-map}, :order [session-map]}, :doc "A session storage engine that stores session data in memory."}