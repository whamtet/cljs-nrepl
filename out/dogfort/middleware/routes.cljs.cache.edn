;; Analyzed by ClojureScript 1.7.170
{:use-macros {promise redlobster.macros, compile-route dogfort.middleware.routes-macros}, :excludes #{}, :name dogfort.middleware.routes, :imports nil, :requires {cljs.node cljs.node, p redlobster.promise, redlobster.promise redlobster.promise, response dogfort.util.response, dogfort.util.response dogfort.util.response, codec dogfort.util.codec, dogfort.util.codec dogfort.util.codec}, :uses {log cljs.node}, :defs {route-match {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/routes.cljs", :line 11, :column 8, :end-line 11, :end-column 19, :private true, :arglists (quote ([url matcher])), :doc "Matches the URL to the matcher and (if they coincide) returns a set of\nroute bindings."}, :private true, :name dogfort.middleware.routes/route-match, :variadic false, :file "out/dogfort/middleware/routes.cljs", :end-column 19, :method-params ([url matcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url matcher])), :doc "Matches the URL to the matcher and (if they coincide) returns a set of\nroute bindings."}, merge-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/routes.cljs", :line 28, :column 8, :end-line 28, :end-column 20, :private true, :arglists (quote ([request params]))}, :private true, :name dogfort.middleware.routes/merge-params, :variadic false, :file "out/dogfort/middleware/routes.cljs", :end-column 20, :method-params ([request params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request params]))}, eval-route {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/routes.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([request method matcher handler]))}, :name dogfort.middleware.routes/eval-route, :variadic false, :file "out/dogfort/middleware/routes.cljs", :end-column 17, :method-params ([request method matcher handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([request method matcher handler]))}, routing {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/routes.cljs", :line 36, :column 7, :end-line 36, :end-column 14, :arglists (quote ([request & handlers])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request handlers)], :arglists ([request & handlers]), :arglists-meta (nil)}}, :name dogfort.middleware.routes/routing, :variadic true, :file "out/dogfort/middleware/routes.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request handlers)], :arglists ([request & handlers]), :arglists-meta (nil)}, :method-params [(request handlers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([request & handlers])}, routes {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/middleware/routes.cljs", :line 43, :column 7, :end-line 43, :end-column 13, :arglists (quote ([& handlers])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(handlers)], :arglists ([& handlers]), :arglists-meta (nil)}}, :name dogfort.middleware.routes/routes, :variadic true, :file "out/dogfort/middleware/routes.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(handlers)], :arglists ([& handlers]), :arglists-meta (nil)}, :method-params [(handlers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& handlers])}}, :require-macros {dogfort.middleware.routes-macros dogfort.middleware.routes-macros, redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:* :else :params :uri :request-method}, :order [:* :params :request-method :uri :else]}, :doc nil}