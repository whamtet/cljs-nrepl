;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dogfort.http, :imports nil, :requires {redlobster.promise redlobster.promise, p redlobster.promise, cljs.node cljs.node, response dogfort.util.response, redlobster.stream redlobster.stream, dogfort.util.response dogfort.util.response, redlobster.events redlobster.events, e redlobster.events, s redlobster.stream, node cljs.node}, :uses nil, :defs {send-result {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 17, :column 8, :end-line 17, :end-column 19, :private true, :arglists (quote ([res ring-result]))}, :private true, :name dogfort.http/send-result, :variadic false, :file "out/dogfort/http.cljs", :end-column 19, :method-params ([res ring-result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([res ring-result]))}, -write-response {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 15, :column 4, :end-line 15, :end-column 19, :protocol dogfort.http/IHTTPResponseWriter, :doc "Write data to a http.ServerResponse", :arglists (quote ([data res]))}, :protocol dogfort.http/IHTTPResponseWriter, :name dogfort.http/-write-response, :variadic false, :file "out/dogfort/http.cljs", :end-column 19, :method-params ([data res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data res])), :doc "Write data to a http.ServerResponse"}, ws {:name dogfort.http/ws, :file "out/dogfort/http.cljs", :line 12, :column 1, :end-line 12, :end-column 19, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 12, :column 17, :end-line 12, :end-column 19}}, send-error-page {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 27, :column 8, :end-line 27, :end-column 23, :private true, :arglists (quote ([res status err]))}, :private true, :name dogfort.http/send-error-page, :variadic false, :file "out/dogfort/http.cljs", :end-column 23, :method-params ([res status err]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([res status err]))}, build-listener {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 66, :column 8, :end-line 66, :end-column 22, :private true, :arglists (quote ([handler options]))}, :private true, :name dogfort.http/build-listener, :variadic false, :file "out/dogfort/http.cljs", :end-column 22, :method-params ([handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler options]))}, run-http {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 119, :column 7, :end-line 119, :end-column 15, :arglists (quote ([handler options]))}, :name dogfort.http/run-http, :variadic false, :file "out/dogfort/http.cljs", :end-column 15, :method-params ([handler options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler options]))}, ws-handler {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 98, :column 7, :end-line 98, :end-column 17, :arglists (quote ([handler websocket]))}, :name dogfort.http/ws-handler, :variadic false, :file "out/dogfort/http.cljs", :end-column 17, :method-params ([handler websocket]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler websocket]))}, Stream {:name dogfort.http/Stream, :file "out/dogfort/http.cljs", :line 11, :column 1, :end-line 11, :end-column 27, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 11, :column 21, :end-line 11, :end-column 27}}, url {:name dogfort.http/url, :file "out/dogfort/http.cljs", :line 10, :column 1, :end-line 10, :end-column 21, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 10, :column 18, :end-line 10, :end-column 21}}, IHTTPResponseWriter {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 14, :column 14, :end-line 14, :end-column 33, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-write-response [[data res]]}}}, :protocol-symbol true, :name dogfort.http/IHTTPResponseWriter, :file "out/dogfort/http.cljs", :end-column 33, :column 1, :line 14, :protocol-info {:methods {-write-response [[data res]]}}, :info nil, :end-line 14, :impls #{nil js/Buffer cljs.core/LazySeq dogfort.http/Stream cljs.core/PersistentVector cljs.core/List string}, :doc nil, :jsdoc ("@interface")}, http {:name dogfort.http/http, :file "out/dogfort/http.cljs", :line 9, :column 1, :end-line 9, :end-column 23, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/dogfort/http.cljs", :line 9, :column 19, :end-line 9, :end-column 23}}}, :require-macros {n cljs.node-macros, cljs.node-macros cljs.node-macros}, :cljs.analyzer/constants {:seen #{:response :get :websocket :ssl-client-cert :remote-addr :keep-alive :port :headers :server-port :content-length :websocket? :status :content-type :character-encoding :error :uri :server-name :query-string :body :scheme :request-method}, :order [:keep-alive :status :headers :body :error :response :ssl-client-cert :remote-addr :server-port :content-length :content-type :character-encoding :uri :server-name :query-string :scheme :request-method :websocket :websocket? :get :port]}, :doc nil}