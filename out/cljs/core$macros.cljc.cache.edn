;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{unsafe-bit-and macroexpand unchecked-remainder-int when-first cond->> bit-set gen-class while satisfies? unchecked-subtract-int ns-unmap import bit-shift-right aget pvalues bound-fn specify vswap! dosync caching-hash bit-shift-left coercive-not aclone dec < with-loading-context test this-as .. delay char unchecked-long unchecked-negate simple-benchmark gen-interface unchecked-inc-int with-bindings js-str bit-shift-right-zero-fill implements? goog-define pos? specify! if-not alength bit-xor doseq unsigned-bit-shift-right neg? unchecked-float undefined? deftype mask when-let divide coercive-boolean <= if-some * min with-precision lazy-seq js-delete truth_ defcurried js-debugger let -> defstruct coercive-not= get doto areduce long double definline bit-and-not unchecked-add-int future fn short definterface js-this unchecked-double string? js-arguments unchecked-multiply-int as-> when-not when int > unchecked-int keyword? unchecked-multiply gen-apply-to some->> unchecked-dec defn float js-in ns es6-iterable mod amap declare - hash-set or assert-args extend-type macroexpand-1 bit-test defmethod time zero? unchecked-dec-int memfn js-obj nil? extend-protocol cond-> dotimes bit-and reify instance? with-open load-file* defonce unchecked-add rfn identical? unchecked-divide-int defn- defprotocol unchecked-subtract sync assert true? array letfn / bitpos bit-or vector proxy-super >= loop bit-flip js-mod unchecked-divide with-out-str condp cond with-in-str some-> ns-interns for binding array-map unchecked-byte with-local-vars defmacro unchecked-short alias proxy inc with-redefs bit-clear locking list + var aset destructure defmulti str coercive-= hash-map if-let false? case exists? bit-not io! byte max == lazy-cat comment copy-arguments unsafe-cast defrecord make-array unchecked-negate-int unchecked-inc and number? js-comment symbol? when-some unchecked-char ->> js-inline-comment refer-clojure}, :name cljs.core$macros, :imports nil, :requires {cljs.compiler cljs.compiler, comp cljs.compiler, cljs.core cljs.core, cljs.env cljs.env, ana cljs.analyzer, clojure.set clojure.set, env cljs.env, string clojure.string, cljs.analyzer cljs.analyzer, clojure.string clojure.string, clojure.walk clojure.walk, core cljs.core}, :uses nil, :defs {unsafe-bit-and {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1098, :column 31, :end-line 1098, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/unsafe-bit-and, :variadic true, :file "out/cljs/core.cljc", :end-column 45, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1098, :macro true, :end-line 1098, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, macroexpand {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2644, :column 16, :end-line 2644, :end-column 27, :macro true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, :name cljs.core$macros/macroexpand, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2644, :macro true, :end-line 2644, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, unchecked-remainder-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1005, :column 31, :end-line 1005, :end-column 54, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unchecked-remainder-int, :variadic false, :file "out/cljs/core.cljc", :end-column 54, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1005, :macro true, :end-line 1005, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, when-first {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 394, :column 19, :end-line 394, :end-column 29, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-first, :variadic true, :file "out/cljs/core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 394, :macro true, :end-line 394, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"}, cond->> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 453, :column 19, :end-line 453, :end-column 26, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->>, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 453, :macro true, :end-line 453, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression."}, bit-set {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1138, :column 31, :end-line 1138, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-set, :variadic false, :file "out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1138, :macro true, :end-line 1138, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, while {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 429, :column 19, :end-line 429, :end-column 24, :macro true, :arglists (quote ([test & body])), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/while, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 429, :macro true, :end-line 429, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil"}, satisfies? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1945, :column 16, :end-line 1945, :end-column 26, :macro true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, :name cljs.core$macros/satisfies?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1945, :macro true, :end-line 1945, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, protocol-prefix {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1192, :column 13, :end-line 1192, :end-column 28, :private true, :arglists (quote ([psym]))}, :private true, :name cljs.core$macros/protocol-prefix, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([psym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1192, :end-line 1192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([psym]))}, unchecked-subtract-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1011, :column 31, :end-line 1011, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract-int, :variadic true, :file "out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1011, :macro true, :end-line 1011, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, ns-unmap {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2615, :column 16, :end-line 2615, :end-column 24, :macro true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, :name cljs.core$macros/ns-unmap, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env p__9466 p__9467]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2615, :macro true, :end-line 2615, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, sigs {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 576, :column 3, :end-line 576, :end-column 7, :private true}, :private true, :name cljs.core$macros/sigs, :variadic false, :file "out/cljs/core.cljc", :end-column 7, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (), :column 1, :line 574, :end-line 576, :max-fixed-arity 1, :fn-var true, :arglists nil}, bool-expr {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 787, :column 13, :end-line 787, :end-column 22, :private true, :arglists (quote ([e]))}, :private true, :name cljs.core$macros/bool-expr, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 787, :end-line 787, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, adapt-ifn-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1358, :column 13, :end-line 1358, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-params, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([type p__8999]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1358, :end-line 1358, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, bit-shift-right {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1129, :column 31, :end-line 1129, :end-column 46, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right, :variadic false, :file "out/cljs/core.cljc", :end-column 46, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1129, :macro true, :end-line 1129, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, aget {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 940, :column 16, :end-line 940, :end-column 20, :macro true, :arglists (quote ([a i] [a i & idxs])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aget, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}, :method-params ([&form &env a i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 940, :macro true, :end-line 940, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env a i] [&form &env a i & idxs])}, specify {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1284, :column 16, :end-line 1284, :end-column 23, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to specify but does not mutate its first argument. The first\n  argument must be an ICloneable instance.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1284, :macro true, :end-line 1284, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to specify but does not mutate its first argument. The first\n  argument must be an ICloneable instance."}, vswap! {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2624, :column 16, :end-line 2624, :end-column 22, :macro true, :arglists (quote ([vol f & args])), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}}, :name cljs.core$macros/vswap!, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}, :method-params [(&form &env vol f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2624, :macro true, :end-line 2624, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env vol f & args]), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in."}, caching-hash {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1150, :column 16, :end-line 1150, :end-column 28, :macro true, :arglists (quote ([coll hash-fn hash-key]))}, :name cljs.core$macros/caching-hash, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env coll hash-fn hash-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1150, :macro true, :end-line 1150, :max-fixed-arity 5, :fn-var true, :arglists (quote ([coll hash-fn hash-key]))}, bit-shift-left {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1126, :column 31, :end-line 1126, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-left, :variadic false, :file "out/cljs/core.cljc", :end-column 45, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1126, :macro true, :end-line 1126, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-base-type {:name cljs.core$macros/js-base-type, :file "out/cljs/core.cljc", :line 1208, :column 1, :end-line 1208, :end-column 29, :private true, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1208, :column 17, :end-line 1208, :end-column 29, :private true}}, coercive-not {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 835, :column 16, :end-line 835, :end-column 28, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-not, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :macro true, :end-line 835, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, resolve-var {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1321, :column 13, :end-line 1321, :end-column 24, :private true, :arglists (quote ([env sym]))}, :private true, :name cljs.core$macros/resolve-var, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1321, :end-line 1321, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, dec {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1060, :column 31, :end-line 1060, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/dec, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1060, :macro true, :end-line 1060, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, < {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1035, :column 31, :end-line 1035, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1035, :macro true, :end-line 1035, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, variadic-fn? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2661, :column 13, :end-line 2661, :end-column 25, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/variadic-fn?, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2661, :end-line 2661, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, this-as {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1294, :column 16, :end-line 1294, :end-column 23, :macro true, :arglists (quote ([name & body])), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}}, :name cljs.core$macros/this-as, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}, :method-params [(&form &env name body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1294, :macro true, :end-line 1294, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & body]), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided."}, .. {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 131, :column 19, :end-line 131, :end-column 21, :macro true, :arglists (quote ([x form] [x form & more])), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/.., :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 131, :macro true, :end-line 131, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x form] [&form &env x form & more]), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand."}, delay {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1983, :column 16, :end-line 1983, :end-column 21, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/delay, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1983, :macro true, :end-line 1983, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls."}, unchecked-negate {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 999, :column 31, :end-line 999, :end-column 47, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate, :variadic false, :file "out/cljs/core.cljc", :end-column 47, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 999, :macro true, :end-line 999, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-benchmark {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2530, :column 16, :end-line 2530, :end-column 32, :macro true, :arglists (quote ([bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}])), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}}, :name cljs.core$macros/simple-benchmark, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2530, :macro true, :end-line 2530, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case."}, prepare-protocol-masks {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1508, :column 13, :end-line 1508, :end-column 35, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/prepare-protocol-masks, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1508, :end-line 1508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, unchecked-inc-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 990, :column 31, :end-line 990, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc-int, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 990, :macro true, :end-line 990, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, js-str {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2595, :column 16, :end-line 2595, :end-column 22, :macro true, :arglists (quote ([s]))}, :name cljs.core$macros/js-str, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2595, :macro true, :end-line 2595, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s]))}, bit-shift-right-zero-fill {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1132, :column 31, :end-line 1132, :end-column 56, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right-zero-fill, :variadic false, :file "out/cljs/core.cljc", :end-column 56, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1132, :macro true, :end-line 1132, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, implements? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1919, :column 16, :end-line 1919, :end-column 27, :macro true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, :name cljs.core$macros/implements?, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1919, :macro true, :end-line 1919, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, assert-valid-fdecl {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 535, :column 30, :end-line 535, :end-column 48, :dynamic true, :private true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, :private true, :name cljs.core$macros/assert-valid-fdecl, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 535, :end-line 535, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, const? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2085, :column 13, :end-line 2085, :end-column 19, :private true, :arglists (quote ([env x]))}, :private true, :name cljs.core$macros/const?, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2085, :end-line 2085, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env x]))}, goog-define {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 690, :column 16, :end-line 690, :end-column 27, :macro true, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, :name cljs.core$macros/goog-define, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env sym default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 690, :macro true, :end-line 690, :max-fixed-arity 4, :fn-var true, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, pos? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1069, :column 31, :end-line 1069, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/pos?, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1069, :macro true, :end-line 1069, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, specify! {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1276, :column 16, :end-line 1276, :end-column 24, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to reify but mutates its first argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify!, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1276, :macro true, :end-line 1276, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to reify but mutates its first argument."}, if-not {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 353, :column 19, :end-line 353, :end-column 25, :macro true, :arglists (quote ([test then] [test then else])), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-not, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}, :method-params ([&form &env test then] [&form &env test then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 353, :macro true, :end-line 353, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env test then] [&form &env test then else]), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil."}, build-positional-factory {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1558, :column 13, :end-line 1558, :end-column 37, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-positional-factory, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1558, :end-line 1558, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, alength {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2414, :column 16, :end-line 2414, :end-column 23, :macro true, :arglists (quote ([a]))}, :name cljs.core$macros/alength, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2414, :macro true, :end-line 2414, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a]))}, bit-xor {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1109, :column 31, :end-line 1109, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-xor, :variadic true, :file "out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1109, :macro true, :end-line 1109, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, doseq {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2262, :column 16, :end-line 2262, :end-column 21, :macro true, :arglists (quote ([seq-exprs & body])), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}}, :name cljs.core$macros/doseq, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}, :method-params [(&form &env seq-exprs body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2262, :macro true, :end-line 2262, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env seq-exprs & body]), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil."}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1135, :column 31, :end-line 1135, :end-column 55, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unsigned-bit-shift-right, :variadic false, :file "out/cljs/core.cljc", :end-column 55, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1135, :macro true, :end-line 1135, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, neg? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1072, :column 31, :end-line 1072, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/neg?, :variadic false, :file "out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1072, :macro true, :end-line 1072, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, adapt-ifn-invoke-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1366, :column 13, :end-line 1366, :end-column 36, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-invoke-params, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([type p__9004]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1366, :end-line 1366, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, unchecked-float {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 969, :column 16, :end-line 969, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-float, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 969, :macro true, :end-line 969, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, undefined? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 914, :column 16, :end-line 914, :end-column 26, :macro true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, :name cljs.core$macros/undefined?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 914, :macro true, :end-line 914, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, deftype {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1574, :column 16, :end-line 1574, :end-column 23, :macro true, :arglists (quote ([t fields & impls])), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/deftype, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env t fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1574, :macro true, :end-line 1574, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env t fields & impls]), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields"}, mask {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1142, :column 16, :end-line 1142, :end-column 20, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/mask, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1142, :macro true, :end-line 1142, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, build-map-factory {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1729, :column 13, :end-line 1729, :end-column 30, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-map-factory, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1729, :end-line 1729, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, when-let {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 408, :column 19, :end-line 408, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-let, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 408, :macro true, :end-line 408, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test"}, divide {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1030, :column 31, :end-line 1030, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/divide, :variadic true, :file "out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1030, :macro true, :end-line 1030, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, coercive-boolean {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 847, :column 16, :end-line 847, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-boolean, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 847, :macro true, :end-line 847, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, <= {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1040, :column 31, :end-line 1040, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<=, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1040, :macro true, :end-line 1040, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, if-some {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 499, :column 19, :end-line 499, :end-column 26, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-some, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 499, :macro true, :end-line 499, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else"}, * {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1019, :column 31, :end-line 1019, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/*, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1019, :macro true, :end-line 1019, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, min {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1081, :column 31, :end-line 1081, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/min, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1081, :macro true, :end-line 1081, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, adapt-proto-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1371, :column 13, :end-line 1371, :end-column 31, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-proto-params, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([type p__9009]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1371, :end-line 1371, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, lazy-seq {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1975, :column 16, :end-line 1975, :end-column 24, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-seq, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1975, :macro true, :end-line 1975, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls."}, js-delete {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 860, :column 16, :end-line 860, :end-column 25, :macro true, :arglists (quote ([obj key]))}, :name cljs.core$macros/js-delete, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([&form &env obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 860, :macro true, :end-line 860, :max-fixed-arity 4, :fn-var true, :arglists (quote ([obj key]))}, truth_ {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 852, :column 16, :end-line 852, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/truth_, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 852, :macro true, :end-line 852, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, annotate-specs {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1530, :column 13, :end-line 1530, :end-column 27, :private true, :arglists (quote ([annots v [f sigs]]))}, :private true, :name cljs.core$macros/annotate-specs, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([annots v p__9065]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1530, :end-line 1530, :max-fixed-arity 3, :fn-var true, :arglists (quote ([annots v [f sigs]]))}, defcurried {:protocol-inline nil, :meta {:private true, :file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :column 26, :line 1168, :macro true, :end-line 1168, :arglists (quote ([name doc meta args & body])), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, :private true, :name cljs.core$macros/defcurried, :variadic true, :file "out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :method-params [(&form &env name doc meta args body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1168, :macro true, :end-line 1168, :max-fixed-arity 6, :fn-var true, :arglists ([&form &env name doc meta args & body]), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, js-debugger {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 866, :column 16, :end-line 866, :end-column 27, :macro true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement."}, :name cljs.core$macros/js-debugger, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 866, :macro true, :end-line 866, :max-fixed-arity 2, :fn-var true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement."}, let {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 720, :column 16, :end-line 720, :end-column 19, :macro true, :arglists (quote ([bindings & body])), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/let, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 720, :macro true, :end-line 720, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein."}, base-type {:name cljs.core$macros/base-type, :file "out/cljs/core.cljc", :line 1198, :column 1, :end-line 1198, :end-column 26, :private true, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1198, :column 17, :end-line 1198, :end-column 26, :private true}}, -> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 99, :column 19, :end-line 99, :end-column 21, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 99, :macro true, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc."}, coercive-not= {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 839, :column 16, :end-line 839, :end-column 29, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-not=, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 839, :macro true, :end-line 839, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, doto {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 174, :column 19, :end-line 174, :end-column 23, :macro true, :arglists (quote ([x & forms])), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/doto, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 174, :macro true, :end-line 174, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))"}, areduce {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2434, :column 16, :end-line 2434, :end-column 23, :macro true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, :name cljs.core$macros/areduce, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a idx ret init expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2434, :macro true, :end-line 2434, :max-fixed-arity 7, :fn-var true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, double {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 964, :column 16, :end-line 964, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/double, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 964, :macro true, :end-line 964, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-extend-protocol {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 199, :column 16, :end-line 199, :end-column 36, :private true, :arglists (quote ([p specs]))}, :private true, :name cljs.core$macros/emit-extend-protocol, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p specs]))}, bit-and-not {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1113, :column 31, :end-line 1113, :end-column 42, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and-not, :variadic true, :file "out/cljs/core.cljc", :end-column 42, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1113, :macro true, :end-line 1113, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, unchecked-add-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 975, :column 31, :end-line 975, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add-int, :variadic true, :file "out/cljs/core.cljc", :end-column 48, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 975, :macro true, :end-line 975, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, do-rfn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1174, :column 13, :end-line 1174, :end-column 19, :private true, :arglists (quote ([f1 k fkv]))}, :private true, :name cljs.core$macros/do-rfn, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([f1 k fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1174, :end-line 1174, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f1 k fkv]))}, fn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :column 19, :line 265, :macro true, :end-line 265, :arglists (quote ([& sigs])), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, :name cljs.core$macros/fn, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 265, :macro true, :end-line 265, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & sigs]), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, short {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 962, :column 16, :end-line 962, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/short, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :macro true, :end-line 962, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-this {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1291, :column 26, :end-line 1291, :end-column 33, :private true, :macro true, :arglists (quote ([]))}, :private true, :name cljs.core$macros/js-this, :variadic false, :file "out/cljs/core.cljc", :end-column 33, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1291, :macro true, :end-line 1291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-double {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 970, :column 16, :end-line 970, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-double, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 970, :macro true, :end-line 970, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, fast-path-protocols {:name cljs.core$macros/fast-path-protocols, :file "out/cljs/core.cljc", :line 756, :column 1, :end-line 756, :end-column 25, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 756, :column 6, :end-line 756, :end-column 25}, :doc "protocol fqn -> [partition number, bit]"}, string? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 902, :column 16, :end-line 902, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/string?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 902, :macro true, :end-line 902, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-defrecord {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1644, :column 13, :end-line 1644, :end-column 27, :private true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, :private true, :name cljs.core$macros/emit-defrecord, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([env tagname rname fields impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1644, :end-line 1644, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, validate-impl-sigs {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1437, :column 13, :end-line 1437, :end-column 31, :private true, :arglists (quote ([env p method]))}, :private true, :name cljs.core$macros/validate-impl-sigs, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([env p method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1437, :end-line 1437, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env p method]))}, js-arguments {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 857, :column 16, :end-line 857, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/js-arguments, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 857, :macro true, :end-line 857, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-multiply-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 996, :column 31, :end-line 996, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply-int, :variadic true, :file "out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 996, :macro true, :end-line 996, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, as-> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 467, :column 19, :end-line 467, :end-column 23, :macro true, :arglists (quote ([expr name & forms])), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/as->, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr name forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 467, :macro true, :end-line 467, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env expr name & forms]), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form."}, when-not {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 423, :column 19, :end-line 423, :end-column 27, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical false, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-not, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 423, :macro true, :end-line 423, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical false, evaluates body in an implicit do."}, when {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 388, :column 19, :end-line 388, :end-column 23, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical true, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 388, :macro true, :end-line 388, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical true, evaluates body in an implicit do."}, int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1106, :column 31, :end-line 1106, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/int, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1106, :macro true, :end-line 1106, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, multi-arity-fn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2738, :column 13, :end-line 2738, :end-column 27, :private true, :arglists (quote ([name meta fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([name meta fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2738, :end-line 2738, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name meta fdecl]))}, > {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1045, :column 31, :end-line 1045, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1045, :macro true, :end-line 1045, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, keyword? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 937, :column 16, :end-line 937, :end-column 24, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/keyword?, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 937, :macro true, :end-line 937, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, ->impl-map {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1328, :column 13, :end-line 1328, :end-column 23, :private true, :arglists (quote ([impls]))}, :private true, :name cljs.core$macros/->impl-map, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1328, :end-line 1328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impls]))}, js-obj* {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2385, :column 13, :end-line 2385, :end-column 20, :private true, :arglists (quote ([kvs]))}, :private true, :name cljs.core$macros/js-obj*, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2385, :end-line 2385, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kvs]))}, unchecked-multiply {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 993, :column 31, :end-line 993, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply, :variadic true, :file "out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 993, :macro true, :end-line 993, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, gen-apply-to {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2565, :column 16, :end-line 2565, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/gen-apply-to, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2565, :macro true, :end-line 2565, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, some->> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 488, :column 19, :end-line 488, :end-column 26, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->>, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 488, :macro true, :end-line 488, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc"}, unchecked-dec {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 978, :column 31, :end-line 978, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec, :variadic false, :file "out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 978, :macro true, :end-line 978, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, defn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2810, :column 3, :end-line 2810, :end-column 7, :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]))}, :name cljs.core$macros/defn, :variadic true, :file "out/cljs/core.cljc", :end-column 7, :method-params ([&form &env name fdecl]), :protocol-impl nil, :arglists-meta (nil {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2808, :column 16, :end-line 2809, :end-column 88}), :column 1, :line 2803, :end-line 2810, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}, float {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 963, :column 16, :end-line 963, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/float, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 963, :macro true, :end-line 963, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-in {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 863, :column 16, :end-line 863, :end-column 21, :macro true, :arglists (quote ([key obj]))}, :name cljs.core$macros/js-in, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env key obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 863, :macro true, :end-line 863, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key obj]))}, es6-iterable {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2598, :column 16, :end-line 2598, :end-column 28, :macro true, :arglists (quote ([ty]))}, :name cljs.core$macros/es6-iterable, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([&form &env ty]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2598, :macro true, :end-line 2598, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ty]))}, amap {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2419, :column 16, :end-line 2419, :end-column 20, :macro true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, :name cljs.core$macros/amap, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env a idx ret expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2419, :macro true, :end-line 2419, :max-fixed-arity 6, :fn-var true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, declare {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 169, :column 19, :end-line 169, :end-column 26, :macro true, :arglists (quote ([& names])), :doc "defs the supplied var names with no bindings, useful for making forward declarations.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}}, :name cljs.core$macros/declare, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}, :method-params [(&form &env names)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 169, :macro true, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & names]), :doc "defs the supplied var names with no bindings, useful for making forward declarations."}, fast-path-protocol-partitions-count {:name cljs.core$macros/fast-path-protocol-partitions-count, :file "out/cljs/core.cljc", :line 773, :column 1, :end-line 773, :end-column 41, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 773, :column 6, :end-line 773, :end-column 41}, :doc "total number of partitions"}, - {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1014, :column 31, :end-line 1014, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/-, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1014, :macro true, :end-line 1014, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, extend-prefix {:name cljs.core$macros/extend-prefix, :file "out/cljs/core.cljc", :line 1346, :column 1, :end-line 1346, :end-column 29, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1346, :column 16, :end-line 1346, :end-column 29}}, hash-set {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2371, :column 16, :end-line 2371, :end-column 24, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-set, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2371, :macro true, :end-line 2371, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, or {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 813, :column 16, :end-line 813, :end-column 18, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/or, :variadic true, :file "out/cljs/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 813, :macro true, :end-line 813, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil."}, assert-args {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 605, :column 33, :end-line 605, :end-column 44, :private true, :macro true, :arglists (quote ([fnname & pairs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnname pairs)], :arglists ([&form &env fnname & pairs]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/assert-args, :variadic true, :file "out/cljs/core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnname pairs)], :arglists ([&form &env fnname & pairs]), :arglists-meta (nil)}, :method-params [(&form &env fnname pairs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 605, :macro true, :end-line 605, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env fnname & pairs])}, extend-type {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1483, :column 16, :end-line 1483, :end-column 27, :macro true, :arglists (quote ([type-sym & impls])), :doc "Extend a type to a series of protocols. Useful when you are\n   supplying the definitions explicitly inline. Propagates the\n   type as a type hint on the first argument of all fns.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-type, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}, :method-params [(&form &env type-sym impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1483, :macro true, :end-line 1483, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env type-sym & impls]), :doc "Extend a type to a series of protocols. Useful when you are\n   supplying the definitions explicitly inline. Propagates the\n   type as a type hint on the first argument of all fns.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))"}, cs {:name cljs.core$macros/cs, :file "out/cljs/core.cljc", :line 2548, :column 1, :end-line 2548, :end-column 8, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2548, :column 6, :end-line 2548, :end-column 8}}, macroexpand-1 {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2635, :column 16, :end-line 2635, :end-column 29, :macro true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, :name cljs.core$macros/macroexpand-1, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2635, :macro true, :end-line 2635, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, bit-test {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1123, :column 16, :end-line 1123, :end-column 24, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-test, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1123, :macro true, :end-line 1123, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n]))}, defmethod {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2515, :column 16, :end-line 2515, :end-column 25, :macro true, :arglists (quote ([multifn dispatch-val & fn-tail])), :doc "Creates and installs a new method of multimethod associated with dispatch-value. ", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}}, :name cljs.core$macros/defmethod, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}, :method-params [(&form &env multifn dispatch-val fn-tail)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2515, :macro true, :end-line 2515, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env multifn dispatch-val & fn-tail]), :doc "Creates and installs a new method of multimethod associated with dispatch-value. "}, time {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2520, :column 16, :end-line 2520, :end-column 20, :macro true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, :name cljs.core$macros/time, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2520, :macro true, :end-line 2520, :max-fixed-arity 3, :fn-var true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, zero? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1066, :column 31, :end-line 1066, :end-column 36, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/zero?, :variadic false, :file "out/cljs/core.cljc", :end-column 36, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1066, :macro true, :end-line 1066, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, unchecked-dec-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 981, :column 31, :end-line 981, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec-int, :variadic false, :file "out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 981, :macro true, :end-line 981, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, proto-assign-impls {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1420, :column 13, :end-line 1420, :end-column 31, :private true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, :private true, :name cljs.core$macros/proto-assign-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([env resolve type-sym type p__9036]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1420, :end-line 1420, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, memfn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 375, :column 19, :end-line 375, :end-column 24, :macro true, :arglists (quote ([name & args])), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/memfn, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 375, :macro true, :end-line 375, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls."}, parse-impls {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 191, :column 16, :end-line 191, :end-column 27, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.core$macros/parse-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, js-obj {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2394, :column 16, :end-line 2394, :end-column 22, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/js-obj, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2394, :macro true, :end-line 2394, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, nil? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 831, :column 16, :end-line 831, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/nil?, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 831, :macro true, :end-line 831, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, extend-protocol {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 207, :column 19, :end-line 207, :end-column 34, :macro true, :arglists (quote ([p & specs])), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-protocol, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}, :method-params [(&form &env p specs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 207, :macro true, :end-line 207, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env p & specs]), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))"}, cond-> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 439, :column 19, :end-line 439, :end-column 25, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 439, :macro true, :end-line 439, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression."}, dotimes {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2445, :column 16, :end-line 2445, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/dotimes, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2445, :macro true, :end-line 2445, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1."}, bit-and {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1093, :column 31, :end-line 1093, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and, :variadic true, :file "out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1093, :macro true, :end-line 1093, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, reify {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1216, :column 16, :end-line 1216, :end-column 21, :macro true, :arglists (quote ([& impls])), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/reify, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}, :method-params [(&form &env impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1216, :macro true, :end-line 1216, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & impls]), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}"}, do-curried {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1161, :column 13, :end-line 1161, :end-column 23, :private true, :arglists (quote ([name doc meta args body]))}, :private true, :name cljs.core$macros/do-curried, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([name doc meta args body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1161, :end-line 1161, :max-fixed-arity 5, :fn-var true, :arglists (quote ([name doc meta args body]))}, instance? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 922, :column 16, :end-line 922, :end-column 25, :macro true, :arglists (quote ([t o]))}, :name cljs.core$macros/instance?, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :method-params ([&form &env t o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 922, :macro true, :end-line 922, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t o]))}, load-file* {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2632, :column 16, :end-line 2632, :end-column 26, :macro true, :arglists (quote ([f]))}, :name cljs.core$macros/load-file*, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2632, :macro true, :end-line 2632, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f]))}, defonce {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 601, :column 16, :end-line 601, :end-column 23, :macro true, :arglists (quote ([x init]))}, :name cljs.core$macros/defonce, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 601, :macro true, :end-line 601, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x init]))}, unchecked-add {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 972, :column 31, :end-line 972, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add, :variadic true, :file "out/cljs/core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 972, :macro true, :end-line 972, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, rfn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1185, :column 26, :end-line 1185, :end-column 29, :private true, :macro true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, :private true, :name cljs.core$macros/rfn, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([&form &env p__8955 fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1185, :macro true, :end-line 1185, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, identical? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 919, :column 16, :end-line 919, :end-column 26, :macro true, :arglists (quote ([a b]))}, :name cljs.core$macros/identical?, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 919, :macro true, :end-line 919, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a b]))}, collect-protocols {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1552, :column 13, :end-line 1552, :end-column 30, :private true, :arglists (quote ([impls env]))}, :private true, :name cljs.core$macros/collect-protocols, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([impls env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1552, :end-line 1552, :max-fixed-arity 2, :fn-var true, :arglists (quote ([impls env]))}, unchecked-divide-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 984, :column 31, :end-line 984, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-divide-int, :variadic true, :file "out/cljs/core.cljc", :end-column 51, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 984, :macro true, :end-line 984, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, defn- {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 327, :column 19, :end-line 327, :end-column 24, :macro true, :arglists (quote ([name & decls])), :doc "same as defn, yielding non-public def", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}}, :name cljs.core$macros/defn-, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}, :method-params [(&form &env name decls)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 327, :macro true, :end-line 327, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & decls]), :doc "same as defn, yielding non-public def"}, maybe-destructured {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 247, :column 4, :end-line 247, :end-column 22, :private true, :arglists (quote ([params body]))}, :private true, :name cljs.core$macros/maybe-destructured, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([params body]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 246, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params body]))}, defprotocol {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1807, :column 16, :end-line 1807, :end-column 27, :macro true, :arglists (quote ([psym & doc+methods])), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}}, :name cljs.core$macros/defprotocol, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}, :method-params [(&form &env psym doc+methods)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1807, :macro true, :end-line 1807, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env psym & doc+methods]), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17"}, unchecked-subtract {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1008, :column 31, :end-line 1008, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract, :variadic true, :file "out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1008, :macro true, :end-line 1008, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, variadic-fn {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2704, :column 13, :end-line 2704, :end-column 24, :private true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl]]))}, :private true, :name cljs.core$macros/variadic-fn, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([name meta p__9495]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2704, :end-line 2704, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl]]))}, gen-apply-to-helper {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2550, :column 13, :end-line 2550, :end-column 32, :private true, :arglists (quote ([] [n])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/gen-apply-to-helper, :variadic false, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2550, :end-line 2550, :max-fixed-arity 1, :fn-var true, :arglists ([] [n])}, ifn-invoke-methods {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1385, :column 13, :end-line 1385, :end-column 31, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/ifn-invoke-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([type type-sym p__9022]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1385, :end-line 1385, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, assert {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2161, :column 16, :end-line 2161, :end-column 22, :macro true, :arglists (quote ([x] [x message])), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}}, :name cljs.core$macros/assert, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}, :method-params ([&form &env x] [&form &env x message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2161, :macro true, :end-line 2161, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x message]), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true."}, true? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 896, :column 16, :end-line 896, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/true?, :variadic false, :file "out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 896, :macro true, :end-line 896, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, array {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2318, :column 16, :end-line 2318, :end-column 21, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/array, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2318, :macro true, :end-line 2318, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, multi-arity-fn? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2658, :column 13, :end-line 2658, :end-column 28, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn?, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2658, :end-line 2658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, letfn {:protocol-inline nil, :meta {:special-form true, :file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :column 19, :line 361, :macro true, :url nil, :end-line 361, :arglists (quote ([fnspecs & body])), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, :name cljs.core$macros/letfn, :variadic true, :special-form true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :method-params [(&form &env fnspecs body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 361, :macro true, :url nil, :end-line 361, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env fnspecs & body]), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, / {:protocol-inline nil, :meta {:cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core$macros//, :variadic true, :file "out/cljs/core.cljc", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1025, :macro true, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, bitpos {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1146, :column 16, :end-line 1146, :end-column 22, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/bitpos, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1146, :macro true, :end-line 1146, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, bit-or {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1102, :column 31, :end-line 1102, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-or, :variadic true, :file "out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1102, :macro true, :end-line 1102, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, vector {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2340, :column 16, :end-line 2340, :end-column 22, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/vector, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2340, :macro true, :end-line 2340, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, adapt-obj-params {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1354, :column 13, :end-line 1354, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-obj-params, :variadic false, :file "out/cljs/core.cljc", :end-column 29, :method-params ([type p__8994]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1354, :end-line 1354, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, >= {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1050, :column 31, :end-line 1050, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>=, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1050, :macro true, :end-line 1050, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, loop {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 732, :column 16, :end-line 732, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/loop, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 732, :macro true, :end-line 732, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target."}, add-obj-methods {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1376, :column 13, :end-line 1376, :end-column 28, :private true, :arglists (quote ([type type-sym sigs]))}, :private true, :name cljs.core$macros/add-obj-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1376, :end-line 1376, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym sigs]))}, bit-flip {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1120, :column 31, :end-line 1120, :end-column 39, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-flip, :variadic false, :file "out/cljs/core.cljc", :end-column 39, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1120, :macro true, :end-line 1120, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-mod {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1087, :column 31, :end-line 1087, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([num div]))}, :name cljs.core$macros/js-mod, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([&form &env num div]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1087, :macro true, :end-line 1087, :max-fixed-arity 4, :fn-var true, :arglists (quote ([num div])), :cljs.analyzer/numeric true}, to-property {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1300, :column 13, :end-line 1300, :end-column 24, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.core$macros/to-property, :variadic false, :file "out/cljs/core.cljc", :end-column 24, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1300, :end-line 1300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, variadic-fn* {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2665, :column 13, :end-line 2665, :end-column 25, :private true, :arglists (quote ([sym method] [sym [arglist & body :as method] solo])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/variadic-fn*, :variadic false, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}, :method-params ([sym method] [sym [arglist & body :as method] solo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2665, :end-line 2665, :max-fixed-arity 3, :fn-var true, :arglists ([sym method] [sym [arglist & body :as method] solo])}, with-out-str {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2575, :column 16, :end-line 2575, :end-column 28, :macro true, :arglists (quote ([& body])), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-out-str, :variadic true, :file "out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2575, :macro true, :end-line 2575, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls."}, condp {:protocol-inline nil, :meta {:added "1.0", :file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :column 16, :line 2026, :macro true, :end-line 2026, :arglists (quote ([pred expr & clauses])), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, :added "1.0", :name cljs.core$macros/condp, :variadic true, :file "out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env pred expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2026, :macro true, :end-line 2026, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env pred expr & clauses]), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, cond {:protocol-inline nil, :meta {:added "1.0", :file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :column 19, :line 154, :macro true, :end-line 154, :arglists (quote ([& clauses])), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, :added "1.0", :name cljs.core$macros/cond, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :method-params [(&form &env clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 154, :macro true, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & clauses]), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, check-valid-options {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2459, :column 13, :end-line 2459, :end-column 32, :private true, :arglists (quote ([options & valid-keys])), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/check-valid-options, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}, :method-params [(options valid-keys)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2459, :end-line 2459, :max-fixed-arity 1, :fn-var true, :arglists ([options & valid-keys]), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."}, add-proto-methods* {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1408, :column 13, :end-line 1408, :end-column 31, :private true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-proto-methods*, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([pprefix type type-sym p__9029]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1408, :end-line 1408, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, some-> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 477, :column 19, :end-line 477, :end-column 25, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 477, :macro true, :end-line 477, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc"}, ns-interns {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2604, :column 16, :end-line 2604, :end-column 26, :macro true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, :name cljs.core$macros/ns-interns, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env p__9459]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2604, :macro true, :end-line 2604, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, base-assign-impls {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1335, :column 13, :end-line 1335, :end-column 30, :private true, :arglists (quote ([env resolve tsym type [p sigs]]))}, :private true, :name cljs.core$macros/base-assign-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([env resolve tsym type p__8987]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1335, :end-line 1335, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve tsym type [p sigs]]))}, for {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2175, :column 16, :end-line 2175, :end-column 19, :macro true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, :name cljs.core$macros/for, :variadic false, :file "out/cljs/core.cljc", :end-column 19, :method-params ([&form &env seq-exprs body-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2175, :macro true, :end-line 2175, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, binding {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2013, :column 16, :end-line 2013, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/binding, :variadic true, :file "out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2013, :macro true, :end-line 2013, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values."}, array-map {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2351, :column 16, :end-line 2351, :end-column 25, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/array-map, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2351, :macro true, :end-line 2351, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, unchecked-byte {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 966, :column 16, :end-line 966, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-byte, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :macro true, :end-line 966, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, defmacro {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2878, :column 12, :end-line 2878, :end-column 20, :arglists (quote ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ([params*] body) + attr-map?])), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", :macro true, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/defmacro, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2878, :macro true, :end-line 2878, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called."}, unchecked-short {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 968, :column 16, :end-line 968, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-short, :variadic false, :file "out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 968, :macro true, :end-line 968, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, validate-fields {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1567, :column 13, :end-line 1567, :end-column 28, :private true, :arglists (quote ([case name fields]))}, :private true, :name cljs.core$macros/validate-fields, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([case name fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1567, :end-line 1567, :max-fixed-arity 3, :fn-var true, :arglists (quote ([case name fields]))}, inc {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1063, :column 31, :end-line 1063, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/inc, :variadic false, :file "out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1063, :macro true, :end-line 1063, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, with-redefs {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1991, :column 16, :end-line 1991, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-redefs, :variadic true, :file "out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1991, :macro true, :end-line 1991, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing."}, bit-clear {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1117, :column 31, :end-line 1117, :end-column 40, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-clear, :variadic false, :file "out/cljs/core.cljc", :end-column 40, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1117, :macro true, :end-line 1117, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, list {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2335, :column 16, :end-line 2335, :end-column 20, :macro true, :arglists (quote ([] [x & xs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/list, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2335, :macro true, :end-line 2335, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x & xs])}, + {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 955, :column 31, :end-line 955, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/+, :variadic true, :file "out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 955, :macro true, :end-line 955, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, aset {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 947, :column 16, :end-line 947, :end-column 20, :macro true, :arglists (quote ([a i v] [a idx idx2 & idxv])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aset, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}, :method-params ([&form &env a i v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 947, :macro true, :end-line 947, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv])}, destructure {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 619, :column 12, :end-line 619, :end-column 23, :arglists (quote ([bindings]))}, :name cljs.core$macros/destructure, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 619, :end-line 619, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, defmulti {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2469, :column 16, :end-line 2469, :end-column 24, :macro true, :arglists (quote ([mm-name & options])), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}}, :name cljs.core$macros/defmulti, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}, :method-params [(&form &env mm-name options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2469, :macro true, :end-line 2469, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env mm-name & options]), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy"}, str {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 781, :column 16, :end-line 781, :end-column 19, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/str, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 781, :macro true, :end-line 781, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs])}, coercive-= {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 843, :column 16, :end-line 843, :end-column 26, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-=, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 843, :macro true, :end-line 843, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, hash-map {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2361, :column 16, :end-line 2361, :end-column 24, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-map, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2361, :macro true, :end-line 2361, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, if-let {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 333, :column 19, :end-line 333, :end-column 25, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-let, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 333, :macro true, :end-line 333, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else"}, add-ifn-methods {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1393, :column 13, :end-line 1393, :end-column 28, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-ifn-methods, :variadic false, :file "out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym p__9026]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1393, :end-line 1393, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, false? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 899, :column 16, :end-line 899, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/false?, :variadic false, :file "out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 899, :macro true, :end-line 899, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, case {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2090, :column 16, :end-line 2090, :end-column 20, :macro true, :arglists (quote ([e & clauses])), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/case, :variadic true, :file "out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}, :method-params [(&form &env e clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2090, :macro true, :end-line 2090, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env e & clauses]), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type."}, exists? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 906, :column 16, :end-line 906, :end-column 23, :macro true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, :name cljs.core$macros/exists?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 906, :macro true, :end-line 906, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, bit-not {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1090, :column 31, :end-line 1090, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/bit-not, :variadic false, :file "out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1090, :macro true, :end-line 1090, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, byte {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 961, :column 16, :end-line 961, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/byte, :variadic false, :file "out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 961, :macro true, :end-line 961, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1075, :column 31, :end-line 1075, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/max, :variadic true, :file "out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1075, :macro true, :end-line 1075, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, == {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1055, :column 31, :end-line 1055, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/==, :variadic true, :file "out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1055, :macro true, :end-line 1055, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, lazy-cat {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2586, :column 16, :end-line 2586, :end-column 24, :macro true, :arglists (quote ([& colls])), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-cat, :variadic true, :file "out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}, :method-params [(&form &env colls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2586, :macro true, :end-line 2586, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & colls]), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))"}, comment {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 149, :column 19, :end-line 149, :end-column 26, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/comment, :variadic true, :file "out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 149, :macro true, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}, warn-and-update-protocol {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1303, :column 13, :end-line 1303, :end-column 37, :private true, :arglists (quote ([p type env]))}, :private true, :name cljs.core$macros/warn-and-update-protocol, :variadic false, :file "out/cljs/core.cljc", :end-column 37, :method-params ([p type env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1303, :end-line 1303, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p type env]))}, copy-arguments {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2697, :column 16, :end-line 2697, :end-column 30, :macro true, :arglists (quote ([dest]))}, :name cljs.core$macros/copy-arguments, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env dest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2697, :macro true, :end-line 2697, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dest]))}, unsafe-cast {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 885, :column 16, :end-line 885, :end-column 27, :macro true, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, :name cljs.core$macros/unsafe-cast, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([&form &env t x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 885, :macro true, :end-line 885, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, defrecord {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1738, :column 16, :end-line 1738, :end-column 25, :macro true, :arglists (quote ([rsym fields & impls])), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/defrecord, :variadic true, :file "out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env rsym fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1738, :macro true, :end-line 1738, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env rsym fields & impls]), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values."}, make-array {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2327, :column 16, :end-line 2327, :end-column 26, :macro true, :arglists (quote ([size]))}, :name cljs.core$macros/make-array, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2327, :macro true, :end-line 2327, :max-fixed-arity 3, :fn-var true, :arglists (quote ([size]))}, unchecked-negate-int {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1002, :column 31, :end-line 1002, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate-int, :variadic false, :file "out/cljs/core.cljc", :end-column 51, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1002, :macro true, :end-line 1002, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-test-expr? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 790, :column 13, :end-line 790, :end-column 30, :private true, :arglists (quote ([env ast]))}, :private true, :name cljs.core$macros/simple-test-expr?, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([env ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 790, :end-line 790, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env ast]))}, unchecked-inc {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 987, :column 31, :end-line 987, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc, :variadic false, :file "out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 987, :macro true, :end-line 987, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, and {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 795, :column 16, :end-line 795, :end-column 19, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/and, :variadic true, :file "out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 795, :macro true, :end-line 795, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true."}, number? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 931, :column 16, :end-line 931, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/number?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 931, :macro true, :end-line 931, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, assoc-test {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 2068, :column 13, :end-line 2068, :end-column 23, :private true, :arglists (quote ([m test expr env]))}, :private true, :name cljs.core$macros/assoc-test, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([m test expr env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2068, :end-line 2068, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m test expr env]))}, js-comment {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 871, :column 16, :end-line 871, :end-column 26, :macro true, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, :name cljs.core$macros/js-comment, :variadic false, :file "out/cljs/core.cljc", :end-column 26, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 871, :macro true, :end-line 871, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, validate-impls {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1465, :column 13, :end-line 1465, :end-column 27, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/validate-impls, :variadic false, :file "out/cljs/core.cljc", :end-column 27, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1465, :end-line 1465, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, symbol? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 934, :column 16, :end-line 934, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/symbol?, :variadic false, :file "out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 934, :macro true, :end-line 934, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, when-some {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 519, :column 19, :end-line 519, :end-column 28, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-some, :variadic true, :file "out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 519, :macro true, :end-line 519, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test"}, unchecked-char {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 967, :column 16, :end-line 967, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-char, :variadic false, :file "out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 967, :macro true, :end-line 967, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, ->> {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 115, :column 19, :end-line 115, :end-column 22, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->>, :variadic true, :file "out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 115, :macro true, :end-line 115, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc."}, js-inline-comment {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 891, :column 16, :end-line 891, :end-column 33, :macro true, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, :name cljs.core$macros/js-inline-comment, :variadic false, :file "out/cljs/core.cljc", :end-column 33, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 891, :macro true, :end-line 891, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, dt->et {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/core.cljc", :line 1535, :column 12, :end-line 1535, :end-column 18, :arglists (quote ([type specs fields] [type specs fields inline])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}}, :name cljs.core$macros/dt->et, :variadic false, :file "out/cljs/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}, :method-params ([type specs fields] [type specs fields inline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1535, :end-line 1535, :max-fixed-arity 4, :fn-var true, :arglists ([type specs fields] [type specs fields inline])}}, :require-macros {core cljs.core, cljs.core cljs.core}, :cljs.analyzer/constants {:seen #{cljs.core$macros/or cljs.core/== cljs.core/-rest ITransientAssociative .-cljs$lang$ctorPrWriter this__9109__auto__ core/= & seq self__ core/first case* :extending-base-js-type x ret__9420__auto__ cljs.core$macros/- clauses cljs.core/rest -with-meta :cljs.analyzer/namespaces defrecord* -prototype cljs.core$macros/zero? cljs.core$macros/assert-args js/Function this__9097__auto__ -iterator cljs.core/str cljs.core/< cljs.core$macros/extend-type cljs.core/PersistentHashMap writer__9112__auto__ try Object ILookup cljs.core/MultiFn cljs.core$macros/nil? -assoc cljs.core/> js/goog IKVReduce xs__8490__auto__ :js .-fqn -conj cljs.core$macros/defonce = ITransientMap cljs.core$macros/identical? this__9101__auto__ :fname cljs.core$macros/instance? x__9128__auto__ boolean cljs.core/PersistentHashSet. cljs.core/specify! cljs.core/pr-sequential-writer :let cljs.core$macros/dotimes else__9100__auto__ iter__9231__auto__ object cljs.core/vector? this__9111__auto__ cljs.core/PersistentArrayMap :cljs.core$macros/not-found :invalid-protocol-symbol this-as cljs.core/= .. -clone prefer-table__9398__auto__ cljs.core/dec -count cljs.core/MultiFn. cljs.core$macros// cljs.core/-assoc :pre cljs.core$macros/bit-or this__9095__auto__ k__9098__auto__ var_args cljs.core$macros/array cljs.core/-write .-constructor cljs.core$macros/assert cljs.core/bit-and-not :instance c__9229__auto__ method-table__9397__auto__ cljs.core/IndexedSeq IIndexed cljs.core/-deref :private :extend IPrintWithWriter :else cljs.core/pr-writer :when IVector IIterable cljs.core$macros/loop cljs.core/-iterator :protocol-duped-method :protocol-symbol .toFixed :protocol .apply cljs.core/count nodeGlobalRequire cljs.core/hash-map goog/typeOf m__9129__auto__ x__9444__auto__ cljs.core/reduce cljs.core/seq js/Date. cljs.core/chunk-first cljs.core/IFn cljs.core$macros/cond cljs.core/get-global-hierarchy cljs.core/apply args :locals cljs.core$macros/condp finally cljs.core/Keyword sb__9443__auto__ :method cljs.core/prn temp__8447__auto__ quote0 IMeta :default clojure.core/symbol? ___9421__auto__ apply-to -lookup ICloneable this__9102__auto__ cljs.core/aclone loop* :protocols :ns -pr-writer cljs.core$macros/binding cljs.core/chunk argc INext :name ICounted IMapEntry end__9422__auto__ :as cljs.core/es6-iterator &form cljs.core$macros/with-redefs cljs.core$macros/inc cljs.core/dissoc IStack :variadic cljs.core/keyword-identical? cljs.core/*print-newline* cljs.core/Delay cljs.core/LazySeq ret cljs.core/chunk-rest :constant cljs.core/atom or__8650__auto__ IReversible :or cljs.core$macros/coercive-= cljs.core$macros/str cljs.core$macros/if-let :file n__9383__auto__ cljs.core/concat opt__9080__auto__ -> cljs.core$macros/+ cljs.core/pr-str :end-column cljs.core$macros/aset t__8665__auto__ __hash and__8636__auto__ x__8868__auto__ writer__9079__auto__ IHash cljs.core$macros/exists? :top-fn cljs.core$macros/== k__9107__auto__ args__9493__auto__ IEquiv cljs.core$macros/case this__9093__auto__ this__9078__auto__ cljs.core$macros/copy-arguments js/Boolean ITransientVector cljs.core/bit-xor RecordIter. cljs.core/native-satisfies? k__9105__auto__ .append .concat js/String do __meta cached-hierarchy__9400__auto__ :method-params i__9492__auto__ call number IEditableCollection cljs.core/- cljs.core/contains? :op :current-symbol cljs.core/into :>> :cljs.analyzer/type :syms even? o__8666__auto__ cljs.core/-conj letfn* :protocol-with-variadic-method if cljs.core/with-meta cljs.core$macros/unchecked-inc cljs.core$macros/and IReset :arglists-meta IEmptyableCollection :cljs.analyzer/protocol-inline temp__8499__auto__ % IRecord new IDerefWithTimeout ns :anonymous ISet IPending :column cljs.core/not-native .getTime :cljs.analyzer/protocol-impl default this__9104__auto__ .fromArray cljs.core$macros/->> cljs.core/-first cljs.core$macros/when-first cljs.core/bit-or start__9419__auto__ cljs.core/PersistentVector -equiv cljs.core// :internal-ctor cljs.core/ISeq cljs.core$macros/unsafe-bit-and .-prototype cljs.core/List .push hierarchy__9401__auto__ cljs.core/-add-method println cljs.core/nthnext ISwap .-cljs$lang$ctorStr cljs.core/get .fromArrays :positional hash-imap len__9491__auto__ cljs.core/cond this__9092__auto__ opts__9113__auto__ this__9106__auto__ :factory :const INamed cljs.core$macros/aget :keys deftype* h__8942__auto__ IReduce let* cljs.core/chunk-append js/Array ITransientCollection cljs.core/-nth :methods not-native js* :undeclared-protocol-symbol :undeclared cljs.core/IMeta cljs.core$macros/coercive-not start__9417__auto__ :line hash-key cljs.core/not-empty :var cljs.core/PersistentArrayMap. x__8854__auto__ fn* entry__9103__auto__ :protocol-info -cljs$lang$applyTo cljs.core$macros/caching-hash recur cljs.core/<= cljs.core/-vreset! :macro cljs.core$macros/this-as cljs.core/symbol :deprecation-nowarn cljs.core$macros/< cljs.core/mod c__9297__auto__ js/Error. .-getBasis :deprecated keyval__9115__auto__ .-cljs$lang$type temp__8561__auto__ cljs.core/* cljs.core/min cljs.core/missing-protocol -meta IMap ret__9418__auto__ x__8943__auto__ a__9382__auto__ other__9094__auto__ array :defs ISeq cljs.core/-lookup cljs.core/nil? &env string argseq__9502__auto__ :declared fs__9228__auto__ cljs.core/nth cljs.core/PersistentHashSet sym cljs.core/max IMultiFn y__8869__auto__ .slice goog/define IAssociative iterys__9227__auto__ function cljs$core$IFn$_invoke$arity$variadic cljs.core$macros/implements? ISeqable :end-line cljs.core$macros/alength :cljs.analyzer/no-resolve ISequential cljs.core$macros/if-not :invoke :print-fn IChunkedSeq y__8855__auto__ cljs.core/next writer__9119__auto__ :post argseq__9494__auto__ -dissoc a__9381__auto__ elapsed__9423__auto__ IAtom cljs.core$macros/when-let map-> cljs.core$macros/mask IWatchable :no-such-method cljs.core$macros/coercive-boolean cljs.core/chunk-cons cljs.core/*print-fn* cljs.core$macros/deftype this__9118__auto__ ITransientSet cljs.core/not :max-fixed-arity set! cljs.core/cons :tag cljs.core/assoc -cljs$lang$maxFixedArity cljs.core$macros/if-some :dot :protocol-deprecated cljs.core$macros/-> . this__9096__auto__ IWithMeta var :mutable cljs.core/system-time cljs.core/chunk-buffer pr-pair__9114__auto__ quote cljs.core/Symbol ICollection :while ASeq cljs.core$macros/lazy-seq cljs.core$macros/js-delete IFn :arglists :skip-protocol-flag cljs.core$macros/let cljs.core$macros/fn :impls :hierarchy js/Object js/Array. IComparable :doc -cljs$lang$macro cljs.core$macros/when-not cljs.core/PersistentVector. count cljs.core/clone apply cljs.core/first :protocol-multiple-impls this__9091__auto__ cljs.core$macros/js-this :jsdoc IChunkedNext js/Number cljs.core/equiv-map cljs.core$macros/js-arguments :protocol-invalid-method :invalid-arity :extend-type-invalid-method-shape .-EMPTY cljs.core/>= cljs.core$macros/keyword? cljs.core/IWithMeta quote1 IWriter :suggested-symbol :map cljs.core/list __extmap cljs.core$macros/when core/str :strs cljs.core$macros/> cljs.core/+ IDeref ISorted method-cache__9399__auto__ *unchecked-if* throw cljs.core/array js/goog.string.StringBuffer. this__9099__auto__ .-cljs$lang$ctorPrSeq this__9458__auto__ core/symbol? cljs.core/vector cljs.core/bit-and cljs.core$macros/defn -hash cljs.core/inc temp__8575__auto__ p__9192__auto__ quoted .-EMPTY-NODE def size__9230__auto__ core/and cljs.core$macros/declare cljs.core/chunked-seq? IList f cljs.core/ITER_SYMBOL .-call -seq}, :order [. .. cljs.core/cond if do :declared def cljs.core$macros/let cljs.core$macros/extend-type :pre :post % cljs.core$macros/assert fn* cljs.core$macros/defn :private cljs.core$macros/if-let temp__8447__auto__ cljs.core$macros/if-not cljs.core/not letfn* cljs.core$macros/fn cljs.core$macros/when-let xs__8490__auto__ cljs.core/seq cljs.core/first temp__8499__auto__ cljs.core$macros/when cljs.core$macros/loop recur even? count clauses cljs.core$macros/-> cljs.core$macros/->> cljs.core/nil? cljs.core$macros/if-some temp__8561__auto__ temp__8575__auto__ &form cljs.core$macros/when-not cljs.core$macros/exists? throw js/Error. cljs.core$macros/assert-args & cljs.core/nthnext :as :else cljs.core/nth :or cljs.core$macros/implements? cljs.core/ISeq cljs.core/apply cljs.core/hash-map :keys :strs :syms quote cljs.core/get cljs.core$macros/declare js* goog/define let* loop* IFn ICounted IEmptyableCollection ICollection IIndexed ASeq ISeq INext ILookup IAssociative IMap IMapEntry ISet IStack IVector IDeref IDerefWithTimeout IMeta IWithMeta IReduce IKVReduce IEquiv IHash ISeqable ISequential IList IRecord IReversible ISorted IPrintWithWriter IWriter IPending IWatchable IEditableCollection ITransientCollection ITransientAssociative ITransientMap ITransientVector ITransientSet IMultiFn IChunkedSeq IChunkedNext IComparable INamed ICloneable IAtom IReset ISwap :tag boolean :js :constant :var :invoke :dot :op seq and__8636__auto__ cljs.core$macros/and or__8650__auto__ cljs.core$macros/or cljs.core$macros/coercive-= core/symbol? x :cljs.analyzer/no-resolve t__8665__auto__ o__8666__auto__ cljs.core$macros/instance? cljs.core/Symbol cljs.core/Keyword cljs.core/+ cljs.core$macros/+ cljs.core/dec cljs.core// cljs.core/inc cljs.core/* cljs.core/- cljs.core/mod cljs.core$macros// cljs.core/< cljs.core/<= cljs.core/> cljs.core/>= cljs.core/== cljs.core$macros/- cljs.core$macros/== cljs.core$macros/> cljs.core$macros/< x__8854__auto__ y__8855__auto__ cljs.core/max x__8868__auto__ y__8869__auto__ cljs.core/min cljs.core/bit-and cljs.core$macros/unsafe-bit-and cljs.core/bit-or cljs.core$macros/bit-or cljs.core/bit-xor cljs.core/bit-and-not cljs.core$macros/mask clojure.core/symbol? hash-key h__8942__auto__ cljs.core$macros/nil? set! x__8943__auto__ object string number array function default js/Boolean js/String js/Array js/Object js/Number js/Function :anonymous :locals :name :ns cljs.core$macros/deftype cljs.core/IWithMeta -with-meta new cljs.core/IMeta -meta :extend :instance cljs.core/specify! cljs.core/clone cljs.core$macros/js-this Object :protocol-symbol :invalid-protocol-symbol :protocol :protocol-deprecated :deprecated :deprecation-nowarn :cljs.analyzer/namespaces :defs :impls :undeclared :undeclared-protocol-symbol ret cljs.core$macros/aset :hierarchy :default -prototype this-as self__ cljs.core$macros/this-as call apply .apply .-call .concat cljs.core/array cljs.core/aclone :skip-protocol-flag cljs.core/IFn :methods :protocol-info :cljs.core$macros/not-found :protocol-invalid-method :fname :no-such-method :protocol-duped-method :invalid-arity :protocol-multiple-impls :extend-type-invalid-method-shape :method :extending-base-js-type :current-symbol :suggested-symbol :cljs.analyzer/type :cljs.analyzer/protocol-impl :cljs.analyzer/protocol-inline -> :factory :positional :internal-ctor :protocols deftype* .-getBasis .-cljs$lang$type .-cljs$lang$ctorStr .-cljs$lang$ctorPrWriter this__9078__auto__ writer__9079__auto__ opt__9080__auto__ cljs.core/-write __meta __extmap __hash :mutable -clone this__9091__auto__ -hash this__9092__auto__ cljs.core$macros/caching-hash hash-imap -equiv this__9093__auto__ other__9094__auto__ cljs.core$macros/identical? .-constructor cljs.core/equiv-map this__9095__auto__ this__9096__auto__ -lookup this__9097__auto__ k__9098__auto__ cljs.core/-lookup this__9099__auto__ else__9100__auto__ cljs.core$macros/case -count this__9101__auto__ cljs.core/count -conj this__9102__auto__ entry__9103__auto__ cljs.core/vector? cljs.core/-assoc cljs.core/-nth cljs.core/reduce cljs.core/-conj -assoc this__9104__auto__ k__9105__auto__ cljs.core$macros/condp cljs.core/keyword-identical? cljs.core/assoc -dissoc this__9106__auto__ k__9107__auto__ cljs.core/contains? cljs.core/dissoc cljs.core/with-meta cljs.core/into cljs.core/not-empty -seq this__9109__auto__ cljs.core/concat cljs.core/vector IIterable -iterator RecordIter. cljs.core/-iterator -pr-writer this__9111__auto__ writer__9112__auto__ opts__9113__auto__ pr-pair__9114__auto__ keyval__9115__auto__ cljs.core/pr-sequential-writer cljs.core/pr-writer defrecord* map-> :map .-cljs$lang$ctorPrSeq this__9118__auto__ cljs.core/list writer__9119__auto__ :doc x__9128__auto__ m__9129__auto__ cljs.core$macros/aget goog/typeOf cljs.core/missing-protocol :jsdoc :protocol-with-variadic-method *unchecked-if* cljs.core$macros/coercive-not cljs.core/native-satisfies? cljs.core/LazySeq cljs.core/Delay try finally cljs.core$macros/with-redefs :>> core/str p__9192__auto__ :line :const cljs.core/str case* cljs.core$macros/keyword? .-fqn cljs.core$macros/cond cljs.core/= cljs.core/pr-str :let :while :when cljs.core/rest iterys__9227__auto__ fs__9228__auto__ cljs.core/cons cljs.core$macros/lazy-seq cljs.core$macros/when-first cljs.core$macros/unchecked-inc cljs.core/chunk-append cljs.core/chunked-seq? c__9229__auto__ cljs.core/chunk-first :file :column :end-line :end-column cljs.core/not-native size__9230__auto__ cljs.core/chunk-buffer cljs.core$macros/coercive-boolean cljs.core/chunk-cons cljs.core/chunk cljs.core/chunk-rest iter__9231__auto__ cljs.core/next not-native c__9297__auto__ cljs.core$macros/array js/Array. .-EMPTY cljs.core/List cljs.core/PersistentVector cljs.core/PersistentVector. .-EMPTY-NODE .fromArray cljs.core/PersistentArrayMap cljs.core/PersistentArrayMap. cljs.core/PersistentHashMap .fromArrays cljs.core/PersistentHashSet cljs.core/PersistentHashSet. a__9381__auto__ cljs.core$macros/alength cljs.core$macros/inc a__9382__auto__ n__9383__auto__ cljs.core$macros/defonce method-table__9397__auto__ cljs.core/atom prefer-table__9398__auto__ method-cache__9399__auto__ cached-hierarchy__9400__auto__ hierarchy__9401__auto__ cljs.core/get-global-hierarchy cljs.core/MultiFn. cljs.core/symbol cljs.core/-add-method cljs.core/MultiFn start__9417__auto__ cljs.core/system-time ret__9418__auto__ cljs.core/prn .toFixed :print-fn println start__9419__auto__ .getTime js/Date. ret__9420__auto__ cljs.core$macros/dotimes ___9421__auto__ end__9422__auto__ elapsed__9423__auto__ cljs.core$macros/str cljs.core/-first args cljs.core/-rest argc f apply-to cljs.core$macros/zero? sb__9443__auto__ js/goog.string.StringBuffer. cljs.core$macros/binding cljs.core/*print-newline* cljs.core/*print-fn* x__9444__auto__ .append .-prototype cljs.core/ITER_SYMBOL this__9458__auto__ cljs.core/es6-iterator core/and = ns var quote0 quote1 sym cljs.core$macros/js-delete cljs.core/-vreset! cljs.core/-deref js/goog nodeGlobalRequire core/= core/first quoted cljs$core$IFn$_invoke$arity$variadic -cljs$lang$maxFixedArity -cljs$lang$applyTo len__9491__auto__ cljs.core$macros/js-arguments i__9492__auto__ .push :top-fn :variadic :max-fixed-arity :method-params :arglists :arglists-meta var_args args__9493__auto__ cljs.core$macros/copy-arguments argseq__9494__auto__ cljs.core/IndexedSeq .slice argseq__9502__auto__ :macro &env -cljs$lang$macro]}, :doc nil}