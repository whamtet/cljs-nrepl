;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{IEncodeJS -clj->js clj->js -key->js}, :name cljs.yunoincore, :imports nil, :requires nil, :uses nil, :defs {IEncodeJS {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/yunoincore.cljs", :line 6, :column 14, :end-line 6, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-clj->js [[x]], -key->js [[x]]}}}, :protocol-symbol true, :name cljs.yunoincore/IEncodeJS, :file "out/cljs/yunoincore.cljs", :end-column 23, :column 1, :line 6, :protocol-info {:methods {-clj->js [[x]], -key->js [[x]]}}, :info nil, :end-line 6, :impls #{nil default}, :doc nil, :jsdoc ("@interface")}, -clj->js {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/yunoincore.cljs", :line 7, :column 4, :end-line 7, :end-column 12, :protocol cljs.core/IEncodeJS, :doc "Recursively transforms clj values to JavaScript", :arglists (quote ([x]))}, :protocol cljs.core/IEncodeJS, :name cljs.yunoincore/-clj->js, :variadic false, :file "out/cljs/yunoincore.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Recursively transforms clj values to JavaScript"}, -key->js {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/yunoincore.cljs", :line 8, :column 4, :end-line 8, :end-column 12, :protocol cljs.core/IEncodeJS, :doc "Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)", :arglists (quote ([x]))}, :protocol cljs.core/IEncodeJS, :name cljs.yunoincore/-key->js, :variadic false, :file "out/cljs/yunoincore.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"}, clj->js {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/cljs/yunoincore.cljs", :line 35, :column 7, :end-line 35, :end-column 14, :arglists (quote ([x])), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js."}, :name cljs.yunoincore/clj->js, :variadic false, :file "out/cljs/yunoincore.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}