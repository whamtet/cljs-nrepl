;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name redlobster.promise, :imports nil, :requires {e redlobster.events, redlobster.events redlobster.events}, :uses nil, :defs {Promise {:num-fields 1, :protocols #{redlobster.promise/IPromise cljs.core/IDeref}, :name redlobster.promise/Promise, :file "out/redlobster/promise.cljs", :end-column 17, :type true, :column 10, :line 15, :record false, :end-line 15, :skip-protocol-flag #{cljs.core/IDeref}}, failed? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 7, :column 4, :end-line 7, :end-column 11, :protocol redlobster.promise/IPromise, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.promise/IPromise, :name redlobster.promise/failed?, :variadic false, :file "out/redlobster/promise.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, realise {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 8, :column 4, :end-line 8, :end-column 11, :protocol redlobster.promise/IPromise, :doc nil, :arglists (quote ([this value]))}, :protocol redlobster.promise/IPromise, :name redlobster.promise/realise, :variadic false, :file "out/redlobster/promise.cljs", :end-column 11, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, promise-fail {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([error-value]))}, :name redlobster.promise/promise-fail, :variadic false, :file "out/redlobster/promise.cljs", :end-column 19, :method-params ([error-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error-value]))}, await {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([& promises])), :doc "Takes a list of promises, and creates a promise that will realise as\n`:redlobster.promise/realised` when each promise has successfully realised,\nor if one or more of the promises fail, fail with the value of the first\nfailing promise.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(promises)], :arglists ([& promises]), :arglists-meta (nil)}}, :name redlobster.promise/await, :variadic true, :file "out/redlobster/promise.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(promises)], :arglists ([& promises]), :arglists-meta (nil)}, :method-params [(promises)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& promises]), :doc "Takes a list of promises, and creates a promise that will realise as\n`:redlobster.promise/realised` when each promise has successfully realised,\nor if one or more of the promises fail, fail with the value of the first\nfailing promise."}, realised? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 6, :column 4, :end-line 6, :end-column 13, :protocol redlobster.promise/IPromise, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.promise/IPromise, :name redlobster.promise/realised?, :variadic false, :file "out/redlobster/promise.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, promise {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 57, :column 7, :end-line 57, :end-column 14, :arglists (quote ([] [success-value])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [success-value]), :arglists ([] [success-value]), :arglists-meta (nil nil)}}, :name redlobster.promise/promise, :variadic false, :file "out/redlobster/promise.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [success-value]), :arglists ([] [success-value]), :arglists-meta (nil nil)}, :method-params ([] [success-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists ([] [success-value])}, on-realised {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 10, :column 4, :end-line 10, :end-column 15, :protocol redlobster.promise/IPromise, :doc nil, :arglists (quote ([this on-success on-error]))}, :protocol redlobster.promise/IPromise, :name redlobster.promise/on-realised, :variadic false, :file "out/redlobster/promise.cljs", :end-column 15, :method-params ([this on-success on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this on-success on-error])), :doc nil}, promise? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 12, :column 7, :end-line 12, :end-column 15, :arglists (quote ([v]))}, :name redlobster.promise/promise?, :variadic false, :file "out/redlobster/promise.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, realise-error {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 9, :column 4, :end-line 9, :end-column 17, :protocol redlobster.promise/IPromise, :doc nil, :arglists (quote ([this value]))}, :protocol redlobster.promise/IPromise, :name redlobster.promise/realise-error, :variadic false, :file "out/redlobster/promise.cljs", :end-column 17, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, IPromise {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 5, :column 14, :end-line 5, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {realised? [[this]], failed? [[this]], realise [[this value]], realise-error [[this value]], on-realised [[this on-success on-error]]}}}, :protocol-symbol true, :name redlobster.promise/IPromise, :file "out/redlobster/promise.cljs", :end-column 22, :column 1, :line 5, :protocol-info {:methods {realised? [[this]], failed? [[this]], realise [[this value]], realise-error [[this value]], on-realised [[this on-success on-error]]}}, :info nil, :end-line 5, :impls #{redlobster.promise/Promise}, :doc nil, :jsdoc ("@interface")}, defer-until-realised {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 96, :column 7, :end-line 96, :end-column 27, :arglists (quote ([promises callback]))}, :name redlobster.promise/defer-until-realised, :variadic false, :file "out/redlobster/promise.cljs", :end-column 27, :method-params ([promises callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([promises callback]))}, ->Promise {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/promise.cljs", :line 15, :column 10, :end-line 15, :end-column 17, :protocols #{redlobster.promise/IPromise cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IDeref}, :factory :positional, :arglists (quote ([ee]))}, :protocols #{redlobster.promise/IPromise cljs.core/IDeref}, :name redlobster.promise/->Promise, :variadic false, :file "out/redlobster/promise.cljs", :end-column 17, :method-params ([ee]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ee])), :skip-protocol-flag #{cljs.core/IDeref}}}, :require-macros {n cljs.node-macros, cljs.node-macros cljs.node-macros}, :cljs.analyzer/constants {:seen #{:redlobster.promise/realised :else :redlobster.promise/not-realised :realise-error :realise-success :redlobster.promise/already-realised ee}, :order [:redlobster.promise/not-realised :else :redlobster.promise/already-realised :realise-success :realise-error ee :redlobster.promise/realised]}, :doc nil}