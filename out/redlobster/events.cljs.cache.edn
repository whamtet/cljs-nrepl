;; Analyzed by ClojureScript 1.7.170
{:name redlobster.events, :doc nil, :excludes #{}, :use-macros nil, :require-macros {n cljs.node-macros, cljs.node-macros cljs.node-macros}, :uses {log cljs.node, clj->js cljs.yunoincore}, :requires {cljs.node cljs.node, cljs.yunoincore cljs.yunoincore}, :imports nil, :defs {unpack-event {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 20, :column 8, :end-line 20, :end-column 20, :private true, :arglists (quote ([event]))}, :private true, :name redlobster.events/unpack-event, :variadic false, :file "out/redlobster/events.cljs", :end-column 20, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, listeners {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 17, :column 4, :end-line 17, :end-column 13, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/listeners, :variadic false, :file "out/redlobster/events.cljs", :end-column 13, :method-params ([emitter event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emitter event])), :doc nil}, event-emitter {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([]))}, :name redlobster.events/event-emitter, :variadic false, :file "out/redlobster/events.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-all-listeners {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 16, :column 4, :end-line 16, :end-column 24, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/remove-all-listeners, :variadic false, :file "out/redlobster/events.cljs", :end-column 24, :method-params ([emitter event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emitter event])), :doc nil}, remove-listener {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 14, :column 4, :end-line 14, :end-column 19, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/remove-listener, :variadic false, :file "out/redlobster/events.cljs", :end-column 19, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}, IEventEmitter {:meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 11, :column 14, :end-line 11, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {on [[emitter event listener]], once [[emitter event listener]], remove-listener [[emitter event listener]], remove-all-listeners [[emitter event]], listeners [[emitter event]], emit [[emitter event args]]}}}, :protocol-symbol true, :name redlobster.events/IEventEmitter, :file "out/redlobster/events.cljs", :end-column 27, :column 1, :line 11, :protocol-info {:methods {on [[emitter event listener]], once [[emitter event listener]], remove-listener [[emitter event listener]], remove-all-listeners [[emitter event]], listeners [[emitter event]], emit [[emitter event args]]}}, :info nil, :end-line 11, :impls #{redlobster.events/EventEmitter}, :doc nil, :jsdoc ("@interface")}, EventEmitter {:name redlobster.events/EventEmitter, :file "out/redlobster/events.cljs", :line 6, :column 1, :end-line 6, :end-column 34, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 6, :column 22, :end-line 6, :end-column 34}}, once {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 13, :column 4, :end-line 13, :end-column 8, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/once, :variadic false, :file "out/redlobster/events.cljs", :end-column 8, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}, emit {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 18, :column 4, :end-line 18, :end-column 8, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event args]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/emit, :variadic false, :file "out/redlobster/events.cljs", :end-column 8, :method-params ([emitter event args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event args])), :doc nil}, on {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-nrepl/out/redlobster/events.cljs", :line 12, :column 4, :end-line 12, :end-column 6, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/on, :variadic false, :file "out/redlobster/events.cljs", :end-column 6, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}}}